CMAKE_MINIMUM_REQUIRED(VERSION 3.18.4)
PROJECT (SSGC)
SET(CMAKE_CXX_STANDARD 14)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

include(CTest)

option(GIAC_ENABLE "Enable Giac library" ON)
option(PI_ENABLE "Enable compiling/linking for the Raspberry PI Zero 2 W" OFF)
option(MCP_KEYPAD_ENABLE "Enable compiling/linking for external keyboard connected via i2c" OFF)
option(LINUX_FRAMEBUFFER_ENABLE "Enabling compiling/linking without using a framebuffer" OFF)
option(LINUX_ENABLE "Enable compiling/linking for linux systems" ON)
option(WINDOWS_ENABLE "Enable compiling/linking for windows" OFF)
option(WIFI_ENABLE "Enable calling wpa_cli for connecting to networks" OFF)

if(LINUX_ENABLE)
    message(STATUS "Enabling Linux linkage...")
    find_library(libsdl2 SDL2 NAME sdl2 REQUIRED)
    find_library(libm m REQUIRED)
    find_library(libpthread pthread REQUIRED)
endif()
if(PI_ENABLE)
    message(STATUS "Enabling Raspberry PI linkage...")
    find_library(libm m REQUIRED)
    find_library(libpthread pthread REQUIRED)
    find_library(libi2c i2c REQUIRED)
    find_library(libwiringPi wiringPi REQUIRED)
    set(LINUX_FRAMEBUFFER_ENABLE 1)
    set(MCP_KEYPAD_ENABLE 1)
else()
    if(MCP_KEYPAD_ENABLE)
        find_library(libi2c i2c REQUIRED)
        find_library(libwiringPi wiringPi REQUIRED)
    endif()
endif()
if(GIAC_ENABLE)
    message(STATUS "Enabling Giac linkage...")
    find_library(libgmp gmp REQUIRED)
    find_library(libgiac giac NAME giac-dev REQUIRED)
endif()
if(WINDOW_ENABLE)
    message(STATUS "Enabling Windows linkage...")
    find_library(libgdi32 gdi32 REQUIRED)
endif()

if(LINUX_ENABLE)
    set(ENABLE_LINUX 1)
else()
    set(ENABLE_LINUX 0)
endif()

if(MCP_KEYPAD_ENABLE)
	message(STATUS "Enabling Keypad")
    set(ENABLE_MCP_KEYPAD 1)
endif()

if(LINUX_FRAMEBUFFER_ENABLE)
    set(ENABLE_LINUX_FRAMEBUFFER 1)
endif()

if(WIFI_ENABLE)
	message(STATUS "Enabling WIFI")	
    set(ENABLE_WIFI 1)
endif()

if(GIAC_ENABLE)
    set(ENABLE_GIAC 1)
else()
    set(ENABLE_GIAC 0)
endif()

if(WINDOWS_ENABLE)
    set(ENABLE_WINDOWS 1)
else()
    set(ENABLE_WINDOWS 0)
endif()
configure_file(calc_conf.h.in calc_conf.h @ONLY)

message(STATUS "CMAKE BUILD TYPE: " ${CMAKE_BUILD_TYPE})
set(JSON_BuildTests OFF CACHE INTERNAL "")
set(JSON_Install ON CACHE INTERNAL "")
include_directories(${CMAKE_SOURCE_DIR})
add_subdirectory(lv_drivers)
add_subdirectory(lvgl)
add_subdirectory(json)
add_subdirectory(json-schema-validator)
add_subdirectory(src)
add_subdirectory(tests)
