Function: parplothexport
Section: graphic
C-Name: parplothexport
Prototype: GV=GGJD0,M,D0,L,p\nParametric|1; Recursive|2; no_Rescale|4; no_X_axis|8; no_Y_axis|16; no_Frame|32; no_Lines|64; Points_too|128; Splines|256; no_X_ticks|512; no_Y_ticks|1024; Same_ticks|2048; Complex|4096
Description:
  (gen,gen,gen,closure,?small,?small):gen:prec  parplothexport($1, $2, $3, $4, $5, $6, $prec)
Help: parplothexport(fmt, X=a,b,expr,{flags=0},{n=0}): parallel version of
 plothexport. Plot of expression expr, X goes from a to b in high resolution,
 returning the resulting picture as a character string which can then be
 written to a file.
Doc: parallel version of \kbd{plothexport}. Plot of expression \var{expr}, $X$
 goes from $a$ to $b$ in high resolution, returning the resulting picture as
 a character string which can then be written to a file.

 The format \kbd{fmt} is either \kbd{"ps"} (PostScript output) or \kbd{"svg"}
 (Scalable Vector Graphics). All other parameters and flags are as in
 \kbd{ploth}.
 \bprog
  ? s = parplothexport("svg", x=1,10, x^2+3);
  ? write("graph.svg", s);
 @eprog\noindent The above only works if \kbd{graph.svg} does not already
 exist, otherwise \kbd{write} will append to the existing file and produce
 an invalid \kbd{svg}. Here is a version that truncates an existing file
 (beware!):
 \bprog
 ? n = fileopen("graph.svg", "w");
 ? filewrite(n, s);
 ? fileclose(n);
 @eprog\noindent This is intentionally more complicated.

 \synt{parplothexport}{GEN fmt, GEN a, GEN b, GEN code, long flags, long n, long prec},
