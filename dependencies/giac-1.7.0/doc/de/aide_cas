# smith
5 Gibt die Smith-Normalform der Koeffizientenmatrix eines Polynoms an (U,D,V wobei U*A*V=D)
# wz_certificate
5 Wilf-Zeilberger Zertifikat
# keep_algext
5 Pseudovariable, die benutzt werden kann um algebraische Erweiterungen zu behalten (keep_algext:=1) oder um sie zu überschreiben (keep_algext:=0)
# jacobi_linsolve
5 Lösung eines linearen Gleichungssystems A*X=b mit dem Jacobi-Verfahren. Die Größe des Fehlers wird mit "eps" festgelegt und die die maximale Anzahl der Iterationen mit "maxiter".
# gauss_seidel_linsolve
5 Lösung eines linearen Gleichungssystems A*X=b mit dem Gauß-Seidel-Verfahren (ohne Spezifikation omega=1) oder dem Relaxationsverfahren, wobei die Grösse des Fehlers mit "eps" und die die maximale Anzahl der Iterationen mit "maxiter" festgelegt wird
# linspace
5 linspace(a,b,n) generiert eine Liste aus n äquidistanten Elementen zwischen a und b, ohne Spezifikation n=100 (kompatibel mit scilab)
# besselY
5 besselY(x,p) gibt die Bessel-Funktion zweiter Gattung Yp(x) zurück.
# BesselY
5 besselY(x,p) gibt die Bessel-Funktion zweiter Gattung Yp(x) zurück.
# besselJ
5 besselJ(x,p) gibt die Bessel-Funktion erster Gattung Jp(x) zurück.
# BesselJ
5 besselJ(x,p) gibt die Bessel-Funktion erster Gattung Jp(x) zurück.
# batons
5 Zeichnet für k=0..nrows die Segmente (xk,0)-(xk,yk), wobei xk=Element Zeile k, Spalte 0 und yk=Element Zeile k, Spalte j (j=1..ncols).
# ()
5 () gibt den Wert einer Funktion zurück oder substituiert Werte in einem Ausdruck
# REDIM
5 Schrumpfe oder Vergrößere eine Matrix (oder einen Vektor) mit 0, sodass sie anschließend die Dimension n1,n2 hat.
# REPLACE
5 Ersetze einen Teil der Matrix A mit Matrix B beginnend mit den Indizes n1,n2.
# infnorm
5 Matrixnorm induziert von l'unendlich-Norm
# frobenius_norm
5 Frobeniusnorm einer Matrix A (=sqrt(sum |aij|^2)).
# matrix_norm
5 Matrixnorm induziert von der Norm von l1, l2 oder l'unendlich
# fadeev
5 Option des Kommandos pcar oder charpoly, um den Algorithmus zu spezifizieren.
# COND
5 Kondition einer Matrix, benutze COND(.,1) für l1, COND(.,2) für l2 und COND(.,inf) für l'unendlich (1 ist Standardeinstellung).
# bezier
5 Bezier-Kurve definiert von Kontrollpunkten.
# flatten
5 Flache rekusiv eine Liste aus Listen ab.
# chisquaret
5 Chi^2 Test: Testet inwiefern 2 (oder n) Datenmengen oder 1 Datenmenge mit einer Verteilungsfunktion übereinstimmen.
# plotcdf
5 Graphische Repräsentation einer kumulierten Verteilungsfunktion.
# back
5 Gibt das letzte Element eines Vektors oder, einer Sequenz oder eines Strings zurück.
# 
5 Listet die Positionen eines Objektes in einer Liste auf
# count
5 Gibt f(l[0])+f(l[1])+...+f(l[size(l)-1]) zurück oder die Zahl, wie oft eine ganze Zahl in einem Vektor aus ganzen Zahlen vorkommt.
# uniform
5 Gibt die Wahrscheinlichkeitsdichte am Punkt x der Standardverteilung auf dem Intervall [a,b] zurück.
# uniform_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine standardverteilte Zufallsvariable auf [a,b] kleiner als x0 (bzw. zwischen x0 und y0 ist).
# uniform_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit, dass eine standardverteilte Zufallsvariable auf [a,b] kleiner als h ist, p ist (0<=p<=1). 
# exponential
5 Gibt die Wahrscheinlichkeitsdichte bei x der Exponentialverteilung mit dem Parameters lambda zurück. 
# exponential_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine exponentialverteilte Zufallsvariable (mit Parameter lambda) auf [a,b] kleiner als x0 (bzw. zwischen x0 und y0 ist).
# exponential_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit, dass eine standardverteilte Zufallsvariable (mit Parameter lambda) auf [a,b] kleiner als h ist, p ist (0<=p<=1). 
# geometric
5 Gibt den Wert bei k der geometrischen Verteilung mit Parameter p (0<p<1) zurück. 
# geometric_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine geometrisch verteilte Variable mit Parameter p (0<p<1) kleiner als k ist (oder zwischen k und m).
# geometric_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit einer geometrisch verteilten Zufallsvariable mit dem Parameter p (0<p<1) kleiner als h zu sein, x ist (0<=x<=1). 
# weibull
5 Gibt die Wahrscheinlichkeitsdichte am Punkt x der Weibull-Verteilung mit den Parametern k, lambda, theta (Standardeinstellung theta=0).
# weibull_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine Weibull verteilte Zufallsvariable mit den Parametern k,lambda,theta kleiner als x0 ist.
# weibull_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit einer Weibull verteilten Zufallsvariable mit den Parametern k,lambda, theta kleiner als h zu sein, p ist (p<=0<=1).
# cauchy
5 Gibt die Wahrscheinlichkeitsdichte am Punkt x der Cauchyverteilung mit den Parametern x0 und a zurück (Standardeinstellung x0=0 und a=1).
# cauchy_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine Cauchy verteilte Zufallsvariable kleiner als x ist.
# cauchy_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit, dass eine Cauchy verteilte Zufallsvariable kleiner h ist, p ist.
# cdf
5 Kumulierte Verteilungsfunktion eines Wahrscheinlichkeitsgesetzes.
# icdf
5 Inverse kumulierte Verteilungsfunktion eines Wahrscheinlichkeitsgesetzes.
# markov
5 Berechnung der Eigenvektoren und Eigenwerte einer Markov-Ketten Übergangsmartrix M, die Liste der korrespondierenden invarianten Wahrscheinlichkeiten, die Liste anderer stark verbundener Komponenten, die Liste der Wahrscheinlichkeiten, die in der Folge positiver Rekurrenz enden.
# randmarkov
5 Gibt eine zufällige Folge von n Zuständen (Markov-Kette) zurück, beginnend von i0 mit der Übergangsmatrix M oder gibt eine stochastische Matrix mit p rekurrenten Schleifen v=[n1,..,np] und i0 transienten Zuständen wieder.
# conjugate_gradient
5 Konjugierter Gradient Algorithmus um A*x=y näherungsweise zu lösen (Präzision eps), wobei A eine symmetrische positiv definite Matrix und so ein optionaler (geratener) Anfangspunkt ist.
# mgf
5 Gibt die momenterzeugende Funktion einer Wahrscheinlichkeitsverteilung einer Normal-, Binomial-, Poisson-, Beta- oder Gammaverteilung zurück. 
# kolmogorovd
5 Kolmogorov-Smirnov Verteilung, 1-2*sum((-1)^(k-1)*exp(-k^2*x^2),k,1,inf)
# kolmogorovt
5 Test der Übereinstimmung zwischen der Kolmogorov-Smirnov-Verteilung mit einer stetigen Wahrscheinlichkeitsverteilung oder zwischen zwei Datenmengen l1 l2 (unbekannte Verteilungsregel) oder zwischen einer Datenmenge l1 und einer Wahrscheinlichkeitsverteilung s.
# gammad
5 Gibt die Gamma-Wahrscheinlichkeitsdichte zurück  (=x^(a-1)*exp(-b*x)*b^a/Gamma(a))
# gammad_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine gammaverteilte Zufallsvariable (mit a und b als Parameter) kleiner als x0 (bzw. zwischen x0 und y0) ist.
# gammad_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit, dass eine gammaverteilte Zufallsvariable kleiner als h ist, p ist (0<=p<=1).
# betad
5 Gibt die Wahrscheinlichkeitsdichte der Beta-Verteilung zurück (=Gamma(a+b)*x^(a-1)*(1-x)^(b-1)/(Gamma(a)*Gamma(b))). 
# betad_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine betaverteilte Zufallsvariable (mit a und b als Parameter) kleiner als x0 (bzw. zwischen x0 und y0) ist. 
# betad_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit, dass eine betaverteilte Zufallsvariable kleiner als h ist, p ist (0<=p<=1).
# taux_accroissement
5 Gibt die Wachstumsrate eines Ausdrucks zurück, wobei die Variable von Val1 zu Val2 geht (Standardeinstellung Var = x).
# shift_phase
5 Gibt den Ausdruck zurück, bei dem die Phase des ausgewerteten trigonometrischen Ausdrucks um pi/2 erhöht wurde.
# revert
5 Gibt die reziproke Entwicklung einer Serienentwicklung um 0 zurück.
# Heaviside
5 Funktion gleich 0, wenn x<0 und gleich 1, wenn x>=0.
# Dirac
5 Diracdistribution
# polar_coordinates
5 Gibt die Liste der Beträge und Polarwinkel eines Punktes in „D oder einer komplexen Zahl zurück, wobei der Punkt als Liste kartesischen Koordinaten angegeben wird.
# rectangular_coordinates
5 Gibt die Liste der Abszissen und Ordinaten eines Punktes zurück, der als Liste von Polarkoordinaten angegeben wird.
# polar_point
5 Gibt den Punkt (in 2D) mit den Argumenten r und t als Polarkoordinaten zurück (z.B. als r*exp(i*t))
# vector
5 Definiert einen Vektor (Ursprung 0, wenn 1 Argument) mit zwei Punkten oder zwei Komponenten oder zwei Affixen (für 2D) oder mit einem Punkt und Vektor oder mit einem Punkt (Seiner Extremität und sein Ursprung ist [0,0,0]). Man muss Listen verwenden, wenn man die Komponenten eines R^n Vektors haben möchte.
# residue
5 Gibt das Residuum eines Ausdrucks zurück, mit v als Variable.
# even
5 Gibt für gerade Zahlen 1 und für ungerade Zahlen 0 zurück.
# odd
5 Gibt für ungerade Zahlen 1 und für gerade Zahlen 0 zurück. 
# tdeg
5 Option des "gbasis" oder "greduce" Befehls, um die Ordnung der Monome zu spezifizieren (Totaler Grad, danach lexikographisch).
# plex
5 Option des "gbasis" oder "greduce" Befehls, um die Ordnung für Monome zu spezifizieren (Voreingestellt ist eine lexikographische Sortierung).
# revlex
5 Option des "gbasis" oder "greduce" Befehls, um die Ordnung für Monome zu spezifizieren (Totaler Grad, danach invers lexikographisch)
# unfactored
5 Option für den "plotimplicit" Befehl. 
# DOM_FLOAT
5 DOM_FLOAT oder "float" ist ein integer, der den Typ einer "float" Variable repräsentiert, welcher vom "type" Befehl widergegeben wird. Es ist zudem eine Option für den "assume" Befehl.
# DOM_INT
5 DOM_INT oder integer oder DOM_int ist ein integer, der den Typ einer "integer" Variable repräsentiert, welcher vom "type" Befehl widergegeben wird. DOM_INT wird verwendet, wenn der integer <2^31 ist. Es ist zudem eine Option für den assume Befehl.
# DOM_SYMBOLIC
5 DOM_SYMBOLIC oder "symbol" ist ein integer, der den Typ einer "symbolic" Variable repräsentiert, welcher vom "type" Befehl widergegeben wird. Es ist zudem eine Option für den "assume" Befehl.
# DOM_IDENT
5 DOM_IDENT oder "identifier" ist ein integer, der den Typ einer "identifier" Variable repräsentiert, welcher vom "type" Befehl widergegeben wird. Es ist zudem eine Option für den "assume" Befehl.
# DOM_LIST
5 DOM_LIST oder "vector" repräsentiert den Typ einer Liste oder Folge, zurückgegeben vom type Befehl. Es ist zudem eine Option für den "assume" Befehl.
# DOM_STRING
5 DOM_STRING oder "string" repräsentiert den Typ eines Strings, zurückgegeben vom Typ Befehl. Es ist zudem eine Option für den "assume" Befehl.
# DOM_COMPLEX
5 DOM_COMPLEX oder "complex" repräsentiert den Typ einer komplexen Zahl oder einer komplexen Variable, zurückgegeben vom Typ Befehl. Es ist zudem eine Option für den "assume" Befehl.
# DOM_FUNC
5 DOM_FUNC oder func repräsentiert den Typ einer Funktion, zurückgegeben vom Typ Befehl. Es ist zudem eine Option für den "assume" Befehl.
# DOM_RAT
5 DOM_RAT oder rational repräsentiert den Typ einer rationalen Zahl, zurückgegeben vom Typ Befehl. Es ist zudem eine Option für den "assume" Befehl.
# set[]
5 set[] oder %{%} wird benutzt um eine Menge zu definieren.
# i[]
5 i[] wird benutzt um ein reelles Intervall zu definieren. 
# complexroot
5 Gibt eine Liste der komplexen Intervalle zurück, die eine Größe <=1 haben und Wurzeln von P enthalten (z.B. i[1.1,1.2]+i[2,2.4]*i für [1.1,1.2]x[2,2.4] mit optionalen a=1+2*i,b=2+3*i), mit Multiplizitäten. 
# posubLMQ
5 Gibt eine obere Schranke für die Werte der positiven Wurzeln von P zurück. Die Akritas-Strzebonski-Vigklas' Local Max Quadratic (LMQ) Methode wird verwendet. 
# poslbdLMQ
5 Gibt eine untere Schranke für die Werte der positiven Wurzeln von P zurück. Die Akritas-Strzebonski-Vigklas' Local Max Quadratic (LMQ) Methode wird verwendet. 
# VAS_positive
5 Gibt eine Liste der Intervalle zurück, die positive Wurzeln von P enthalten. Vincent-Akritas-Strzebonski's Methode (VAS) wird verwendet.
# VAS
5 Gibt eine Liste der Intervalle zurück, die reelle Wurzeln von P enthalten. Vincent-Akritas-Strzebonski's Methode (VAS) wird verwendet.
# realroot
5 Gibt die Liste der Intervalle zwischen a und b zurück, die eine Länge <=l haben und die reellen Wurzeln von P enthalten. Die Multiplizität wird mitangegeben. Ohne nähere Angabe wird die Vincent-Akritas-Strzebonski (VAS) Methode verwendet. realroot(sturm,P) verwendet Sturms Methode.
# rationalroot
5 Gibt die Liste der rationalen Wurzeln von P zurück, ohne die Multiplizität mitanzugeben.
# crationalroot
5 Gibt die Liste der komplex rationalen Wurzeln von P zurück, ohne die Multiplizität mitanzugeben.
# trapezoid
5 Option des "plotarea" und des "area" Befehls.
# simpson
5 Option des "area" Befehls.
# pow2exp
5 Schreibt einen Exponenten in eine Exponentialfunktion um. 
# expexpand
# lnexpand
# trigexpand
5 Entwickelt eine trigonometrische Funktion.
# combine
5 Kombiniert die Terme in einem Ausdruck nach einer [Klasse von] Funktion f [übergeben im zweiten Argument].
# plotarea
5 Zeige die Fläche unter einer Kurve an, optional mit einer Quadraturmethode (trapezoid, left_rectangle (=linksbündiges Rechteck), right_rectangle (=rechtbündiges Rechteck), middle_point (=Mittelpinkt)).
# plotinequation
5 Zeigt den Graphen der Lösung von Ungleichungen mit 2 Variablen an.
# plotdensity
5 Zeigt in der Ebene mit Farben den Graphen eines Ausdrucks mit zwei Variablen an.
# frames
5 Option vom "animate" und "animate3d" Befehl, um die Nummer der Bilder anzuzeigen.
# animate
5 Animiert einen Graphen von Xpr, abhängig von x mit der Variable t, indem der Befehl "plot" aufgerufen wird.
# animate3d
5 Animiert einen Graphen von Xpr abhängig von [x,y] mit dem Parameter t, indem der Befehl "plotfunc" aufgerufen wird.
# animation
5 Zeichnet in einer Schleife jedes Objekt einer Folge von geometrischen Objekten.
# camembert
5 Zeichnet ein Tortendiagramm einer statistischen Reihe mit einer Variablen.
# bar_plot
5 Zeichnet ein Balkendiagramm einer statistischen Reihe mit einer Variablen.
# listplot
5 Zeichnet eine polygonale Linie durch die Punkte der Abszisse 0,…,n und Ordinate l=[y0,…,yn] oder eine Linie durch die Punkte die in M angegeben werden. Die erste Spalte gibt die Abszisse und die zweite Spalte die Ordinate an.
# pari
5 Führt einen PARI/GP Befehl aus oder exportiert alle PARI/GP Befehle.
# bitor
5 Inklusive dem "logischen Oder"-Bit.
# bitand
5 Logisches und Bit.
# bitxor
5 Exklusive dem "logischen Oder"-Bit.
# hamdist
5 Bit Hamming-Abstand.
# simplex_reduce
5 Reduktion mit dem simplex-Algorithmus, um max(c.x) zu finden unter der Bedingung A.x<=b und x>=0, b>=0. Gibt das Maximum, die verbesserte Lösung "x" und die reduzierte Matrix zurück. Akzeptiert auch[[A|I|b],[-c|*|0]] als Argument.
# spline
5 Spline (Polynomzug) durch die Punkte gegeben durch die Listen lx und ly, Variable x, Grad d.
# convexhull
# as_function_of
5 Gibt ein Element, das als Funktion von einem vorher definierten Element definiert ist, zurück. 
# save_history
5 Speichert den Verlauf der Befehle in einem Dokument mit dem Namen "str". 
# DispG
5 Zeigt das DispG-Fenster an (DispG ohne ()).
# DispHome
5 Schließt das DispG-Fenster.
# ans
5 Gibt die n+1 te Antwort des Befehlsverlaufs zurück, wenn n>=0 oder die (-n)te vorherige Antwort, wenn n<0 (ohne Spezifizierung ist n=-1 für die vorherige Antwort)
# quest
5 Gibt die n+1 te Frage des Befehlsverlaufs zurück, wenn n>=0 oder die (-n)te vorherige Antwort, wenn n<0 (ohne Spezifizierung ist n=-1 für die vorherige Frage)
# ClrIO
5 Lösche den output-Bildschirm
# ithprime
5 Gibt die n-te Primzahl kleiner als 2.10^8 zurück.
# nprimes
5 Zählt die Anzahl von Primzahlen kleiner als n.
# assign
5 Speichert das zweite Argument (der Gleichung) in der Variablen, die als erstes Argument (der Gleichung) gegeben wurde. (Maple-Kompatibilität) 
# ismith
5 Smith-Normalform einer Matrix mit ganzzahligen Koeffizienten: Gibt U,B,V zurück, sodass U und V invertierbar und ganzzahlig, B diagonal, B[j,j] teilt B[j+1,j+1] und B=U*A*V.
# ihermite
5 Hermite-Normalform einer Matrix mit ganzzahligen Koeffizienten: Gibt L,U zurück, sodass L invertierbar und ganzzahlig, U obere Dreiecksmatrix und U=L*A.
# GF
5 Erschafft ein Galois Feld mit Charakteristik p mit p^n Elementen. Das Minimalpolynom ist primitiv außer, wenn es gegeben wird oder wenn 0 als letztes Argument gegeben wird. 
# droite_tangente
5 Zeichnet die Tangente zu y=f(x) bei x=a.
# LineTan
5 Zeichnet die Tangente zu y=f(x) bei x=a. Verwenden Sie keine Klammern und setzen Sie keine Klammern außen herum. 
# xor
5 Exklusives "Oder" (infix Operator).
# reverse_rsolve
5 Wenn v=[v_0 ... v_(2n-1)], gebe [b_n,...,b_0] so zurück, dass b_n*v_{n+k}+...+b_0*v_k=0 mit k=0..n-1.
# revlist
5 Gibt die Liste l in umgekehrter Reihenfolge zurück.
# ratnormal
5 Schreibe als irreduzibler rationaler Bruch um.
# pade
5 Pade-Approximation P/Q=Xpr mod x^(n+1) oder mod N mit Grad von (P)<p.
# is_coplanar
5 Testet ob 4 Punkte in derselben Ebene sind.
# is_cospheric
5 Testet ob 5 Punkte auf derselben Sphäre sind.
# is_included
5 Testet ob eine Menge oder eine Liste in einer anderen Menge oder Liste enthalten ist.
# gnuplot
5 Prozessiert einen gnuplot Befehl (im 3D Bildschirm).
# current_sheet
5 Inhalt des Matrix-Editors oder der Tabelle.
# lll
5 (S,A,L,O):=lll(M), Kurzbasis eines Gitters (L*O=A*M=S).
# fft
5 Schnelle Fouriertransformation (Fast Fourier Transform) in â„? oder im endlichen Körper â„¤/pâ„¤ mit a als einfache n-te Wurzel von 1 (n=Größe(L)).
# ifft
5 Inverse Schnelle Fouriertransformation (Fast Fourier Transform).
# hessenberg
5 Matrixreduktion auf Hessenberg-Form. Gibt [P,B] wieder, sodass B = inv(P)*A*P, ohne Spezifikation n=0 und das Resultat ist exakt. Sonst ist das Resultat numerisch. Für n=-1 ist B eine oberer Dreiecksmatrix, n=-2 P ist Orthogonal und wenn n eine Primzahl ist, wird das Resultat mod n angegeben. 
# SCHUR
5 Reduziert eine Matrix auf die Hessenberg-Form. Gibt [P,B] zurück, sodass B=inv(P)*A*P: SCHUR(A)=Hessenberg(A,-1).
# companion
5 Begleitmatrix eines Polynoms (an=1).
# cote
5 Dritte Koordinate (z) eines 3D Punktes.
# chrem
5 Chinesischer Rest einer ganzen Zahl oder eines Polynoms.
# ecris
5 Schreibe einen String s mit der Schriftart n (ohne Spezifikation n=14) am Punkt [x,y] (ohne Spezifikation dort, wo die Schildkröte ist.
# signe
5 Schreibe den String s in Schriftart 20 am Punkt [10,10].
# prism
5 Zeichnet ein Prisma mit der Basisebene ABCD...und mit Kanten parallel zu AA1 (die Seiten sind Parallelogramme).
# common_perpendicular
5 Zeichnet das gemeinsame Lot auf die Linien D1 und D2.
# point2d
5 Definiert zufällig die Koordinaten (zwischen -5 und 5) der als Argument gegebenen 2dPunkte. 
# point3d
5 Definiert zufällig die Koordinaten (zwischen -5 und 5) der als Argument gegebenen 3dPunkte. 
# octahedron
5 Zeichnet einen Oktaeder mit Zentrum A, Vertex B und so, dass die Ebene ABC 4 Vertices enthält.
# icosahedron
5 Zeichnet einen Ikosaeder mit Zentrum A,Vertex B und so, dass die Ebene ABC einen der 5 Vertices enthält, die am nächsten an B sind. 
# dodecahedron
5 Zeichnet einen Dodekaeder mit Zentrum A, Vertex B und sodass die Ebene ABC eine Symmetrieachse des Dodekaeders enthält.
# parallelepiped
5 Zeichnet ein Parallelepiped mit den Seiten AB,AC,AD (die Seiten sind Parallelogramme).
# polyhedron
5 Zeichnet einen konvexen Polyeder, wobei die Argumente unter den Vertices sind.
# pyramid
5 Zeichnet eine reguläre Pyramide ABCD mit Vertices A,B in der Fläche (A,B,C), wenn es drei Argumente gibt und die Pyramide ABCD bei 4 Argumenten. 
# cube
5 Zeichnet den Würfel mit den Vertices A,B und einer Seite in der Ebene(A,B,C).
# centered_tetrahedron
5 Zeichnet den regulären Tetraeder mit Zentrum A, Vertex B und einem Vertex in der Ebene (A,B,C).
# centered_cube
5 Zeichnet den Würfel mit Zentrum A, Vertex b sodass die Ebene ABC eine Symmetrieachse enthält.
# cone
5 Zeichnet einen Kegel mit Vertex a, Richtung v und dem Öffnungswinkel t[und mit Höhe h und -h]
# half_cone
5 Zeichnet einen Halb-Kegel mit Vertex a, Richtung v und dem Öffnungswinkel t[und mit Höhe h und -h]
# cylinder
5 Zeichnet einen Zylinder mit der Achse (A,v), mit Radius r [und mit Höhe h]
# erase3d
5 Löscht den 3D Grafikbildschirm.
# sphere
5 Sphäre (A,B) (respektive Sphäre (A,r)) zeichnet die Sphäre mit Durchmesser AB (respektive Zentrum A und Radius r) im 3D Raum.
# plane
5 plane(A,B,C) oder plane (A,line(B,C)) (respektive plane(a*x+b*y+c*z+d=0)) zeichnet die Ebene ABC (respektive die Lösung von a*x+b*y+c*z+d=0) im 3D-Raum.
# line
5 line(A,B) oder line (A,slope=m) oder line(A,[1,m]) oder line (a*x+b*y+c=0) oder line(a*x+b*y+c*z+d=0,aa*x+bb*y+cc*z+dd=0) oder line(A,u)) zeichnet die Linie AB bzw. Line durch A mit Steigung m oder mit dem Richtungsvektor u oder die Lösung der Gleichung im 3D-Raum.
# point
5 A:=point(za) oder A:=point(a,b) (respektive A:=point([a,b,c])) zeichnet einen Punkt oder den Affix-Punkt za=a+ib (respektive mit den Koordinaten (a,b,c)) mit Bezeichnung A.
# efface
5 Löscht den Schildkrötenbildschirm oder die Schildkröte geht n Schritte zurück beim Löschen.
# si
5 Befehle mit Bedingung : (si (=if,wenn) … (=then, dann)...sinon(=else,sonst)...fsi(finish if,Ende wenn))
# pour
5 For-Schleife (pour...de...jusque...[pas…] faire...fpour;) Übersetzt:(Für...von ...bis...[Schritt...]mache...Ende für;)
# de
5 Benutzt in For-Schleife (for...from ...to... [step...] do...od;) Übersetzt:(Für...von ...bis...[Schritt...]mache...Endefür;).
# jusque
5 Benutzt in For-Schleife (pour...de…...jusque/to... [pas...] faire...fpour;) übersetzt:(Für...von ...bis...[Schritt...]mache...Ende für;).
# tantque
5 While-Schleife (tantque...faire...ftantque;) Übersetzt: (Während...mache...Ende Während).
# do
5 Schlüsselwort in einer Schleife.
# return
5 Befehl, der eine Funktion unterbricht und dessen Wert zurückgibt.
# dessine_tortue
5 Zeichnet das ganze (oder nicht, wenn n=1) Dreieck, dass die Schildkröte darstellt.
# avance
5 Die Schildkröte macht n Schritte vorwärts (Ohne Spezifikation n=10).
# recule
5 Die Schildkröte macht n Schritte rückwärts (Ohne Spezifikation n=10).
# saute
5 Die Schildkröte geht n Schritte vorwärts, ohne Spur (ohne Spezifikation n=10).
# pas_de_cote
5 Die Schildkröte mache n Schritte nach links (-n Schritte nach rechts, wenn n negativ) ohne Spur (ohne Spezifikation n=10).
# tourne_droite
5 Die Schildkröte dreht sich n Grad nach rechts (ohne Spezifikation
# tourne_gauche
5 Die Schildkröte dreht sich n Grad nach links (ohne Spezifikation
# leve_crayon
5 Nimmt den Stift nach oben, sodass sich die Schildkröte ohne Spuren bewegt.
# baisse_crayon
5 Nimmt den Stift herunter, sodass sich die Schildkröte mit Spuren bewegt.
# crayon
5 Ändert die Farbe des Stiftes (ohne Parameter ist der Stift rot).
# position
5 Gibt die Position der Schildkröte in Pixel an oder setzt die Schildkröte an die Position der Argumente und behält dabei die Orientierung bei.
# cap
5 Gibt die Orientierung der Schildkröte wieder in Grad oder dreht die Schildkröte abhängig vom Argument.
# vers
5 Dreht die Schildkröte in die Richtung des Punktes, der im Argument gegeben wurde.
# rond
5 Zeichnet einen Kreis (oder einen Bogen) mit Radius r (respektive mit dem Winkel (0,a) oder (a,b)), anliegend an die Position der Schildkröte.
# disque
5 Zeichnet eine Scheibe (oder einen Kreissektor) mit Radius r (respektive mit dem Winkel (0,a) oder (a,b)), anliegend an die Position der Schildkröte.
# disque_centre
5 Zeichnet eine Scheibe (oder einen Kreissektor) mit Radius r (respektive mit dem Winkel (0,a) oder (a,b)), mit der Schildkröte im Mittelpunkt.
# rectangle_plein
5 Zeichnet ein Rechteck (respektive ein Quadrat) mit den Seiten a,b (respektive a) von der Position der Schildkröte und links davon (ohne Spezifikation b=a)
# triangle_plein
5 Zeichnet ein ausgefülltes Dreieck mit den Seiten a,b und dem Winkel von der Position der Schildkröte (ohne Spezifikation t=90 oder (b=a und t=90)).
# polygone_rempli
5 Das Argument ist eine ganze Zahl ?1, die die Anzahl der letzten Positionen der Schildkröte angibt, mit denen ein Polygon gezeichnet werden soll. Dieses Polygon wir dann ausgefüllt.
# repete
5 Befehl führt k mal dasselbe Kommando aus.
# debut_enregistrement
5 Markiert den Anfang der Aufzeichnung der Befehle, deren Zeichnung den Namen hat, der im Argument gegeben wurde. 
# fin_enregistrement
5 Markiert das Ende der Aufzeichnung der Befehle und speichert diese Befehle in einer Datei. Der Name der Datei wird im Argument festgelegt.
# cache_tortue
5 Versteckt die Schildkröte.
# montre_tortue
5 Zeigt die Schildkröte.
# envelope
5 Gibt die Umhüllende wieder, die durch die Kurven der Gleichung Xpr=0 erzeugt wird, wenn t bewegt wird.
# powerpc
5 Gibt die reelle Zahl d^2-R^2 (d=Abstand zwischen Punkt und Mittelpunk, R=Radius) wieder.
# cross_ratio
5 Gibt die komplexe Zahl gleich ((c-a)/(c-b))/((d-a)/(d-b)) zurück.
# division_point
5 Gibt den Punkt M zur Zahl z in der komplexen Ebene zurück mit (z-a)=k*(z-b) (MA=k*MB).
# radical_axis
5 Gibt die Gerade der Punkte zurück, die dieselbe Potenz haben bezüglich der zwei Kreise. 
# pole
5 Gibt den Punkt zurück, der die Gerade als Polare bezüglich des Kreises hat. 
# polar
5 Gibt die Gerade der konjugierten Punkte von A bezüglich des Kreises zurück
# reciprocation
5 Gibt die Liste zurück, in der Punkte (respektive Geraden) mit ihren Polaren (respektive Polen) bezüglich des Kreises C ersetzt werden.
# harmonic_conjugate
5 Gibt die harmonische Konjugierte C bezüglich A und B von 3 Punkten oder von 3 Parallelen bzw. 3 kopunktualen Geraden zurück. Alternativ kann auch die harmonische Konjugierte C bezüglich der Polaren eines Punktes bezüglich zweier Geraden erhalten werden. 
# harmonic_division
5 Gibt die 4 Punkte (respektive Geraden) zurück und beeinflusst das letzte Argument so, dass die 4 Punkte eine harmonische Teilung formen.
# is_conjugate
5 Gibt 1 zurück, wenn die 3 (bzw. 4) Argumente bezüglich eines Kreises (respektive 2 Geraden) konjugiert sind. Sonst wird 0 zurückgegeben.
# is_harmonic
5 Gibt 1 zurück, wenn die 4 Punkte eine harmonische Teilung formen. Sonst wird 0 zurückgegeben.
# is_harmonic_circle_bundle
5 Gibt 1 zurück, wenn die Kreise einen Strahl bilden, 2 wenn sie das gleiche Zentrum haben, 3 wenn sie gleich sind. Sonst wird 0 zurückgegeben.
# is_harmonic_line_bundle
5 Gibt 1 zurück, wenn die Geraden einen gemeinsamen Punkt bilden,2 wenn sie parallel sind, 3 wenn sie gleich sind. Sonst wird 0 zurückgegeben.
# is_orthogonal
5 Gibt 1 zurück, wenn die zwei Kreise orthogonal sind (orthogonale Tangenten am Schnittpunkt) oder 2 wenn die zwei Gerade orthogonal sind. Sonst wird 0 zurückgegeben. 
# is_isosceles
5 Gibt 1,2 oder 3 zurück, wenn die freien Punkte (oder das Objekt) ein gleichschenkliges Dreieck, mit den Vertices 1,2 oder 3 bilden. Gibt 4 zurück, wenn die 3 Punkte (oder das Objekt) ein gleichseitiges Dreieck bilden, sonst 0.
# is_equilateral
5 Gibt 1 zurück, wenn die drei Punkte (oder das Objekt) ein gleichseitiges Dreieck bilden, sonst wird 0 zurückgegeben.
# is_rectangle
5 Gibt 1 oder 2 wenn die drei Punkte (oder das Objekt) ein rechtwinkliges Dreieck mit den Vertices 1,2 oder 3 bilden. Sonst 0. [oder 1, wenn die 4 Punkte (oder das Objekt) ein Rechteck bilden, 2 wenn die 4 Punkte (oder das Objekt) ein Quadrat bilden und 0 sonst.]
# is_square
5 Gibt 1 zurück, wenn die 4 Punkte ein Quadrat bilden. Sonst wird 0 zurückgegeben.
# is_parallelogram
5 Gibt 1,2,3 oder 4 zurück, wenn die 4 Punkte (oder das Objekt) ein Parallelogramm bilden, (2 für eine Raute, 3 für ein Rechteck und 4 für ein Quadrat). Sonst wird 0 zurückgegeben. 
# is_rhombus
5 Gibt 1 oder 2 zurück, wenn die 4 Punkte (oder das Objekt) eine Raute bilden (2 für ein Quadrat). Sonst wird 0 zurückgegeben.
# coordinates
5 Gibt die eine List (bzw. eine Matrix) der Abszissen und Ordinaten eines Punktes oder eines Vektors zurück (respektive von Punkten oder Vektoren).
# false
5 boolean gleich falsch (0)
# true
5 boolean gleich wahr (1)
# or
5 boolescher infix-Operator (oder).
# and
5 boolescher infix-Operator (und).
# end
5 Ende eines Blocks. 
# bisection_solver
5 Argument für "fsolve", dass die Lösungsmethode zum Lösen einer numerischen Gleichung vorgibt.
# dnewton_solver
5 Argument für "fsolve", dass die Lösungsmethode zum Lösen einer numerischer Gleichungen vorgibt.
# _cm
5 Zentimeter 
# _mm
5 Millimeter.
# _km
5 Kilometer.
# _m^2
5 Quadratmeter.
# _m^3
5 Kubikmeter 
# _cm^2
5 Quadratzentimeter
# _cm^3
5 Kubikzentimeter
# _km^2
5 Quadratkilometer
# _yd^2
5 Quadrat-Yard
# _yd^3
5 Kubik-Yard 
# _ft^2
5 Quadrat-Fuß
# _ft^3
5 Kubik-Fuß
# _in^2
5 Quadrat-Inch
# _in^3
5 Kubik-Inch
# _mi^2
5 Quadrat-Meile
# _miUS^2
5 Quadrat-US-Meile
# _ml
5 Milliliter
# _s
5 Sekunde
# _mn
5 Minute
# _(m/s)
5 Meter pro Sekunde
# _(cm/s)
5 Centimeter pro Sekunde
# _(ft/s)
5 Fuß pro Minute
# _(m/s^2)
5 Meter pro Quadratsekunde
# _Wh
5 Watt-Stunde
# _kWh
5 Kilowatt-Stunde
# _Kcal
5 Kilokalorie. 
# _MeV
5 Megaelektronenvolt. 
# _ft*lb
5 Fuß pro Pfund
# _tep
5 Äquivalent zu einer Tonne Öl 
# _lep
5 Äquivalent zu einem Liter Öl 
# _bblep
5 Äquivalent zu einem Barrel (Fass) Öl 
# _MW
5 Megawatt
# _degreeF
5 Grad Fahrenheit
# _deg
5 Grad (Winkel)
# _Rankine
5 Grad Rankine
# _MHz
5 Megahertz
# _tec
5 Äquivalent zu einer Tonne Kohle
# _tr
5 tour=2*pi _rad.
# _tex
5 tex=10^-6 _(kg/m).
# _(rad/s)
5 Rad (Winkel) pro Sekunde
# _(tr/min)
5 Umdrehungen pro Minute
# _(tr/s)
5 Umdrehungen pro Sekunde
# _Gal
5 Gal=0.01_(m/s^2).
# _(rad/s^2)
5 Rad pro Sekunde-Quadrat
# _NA_
5 Avogadro-Konstante 
# _k_
5 Boltzmann-Konstante 
# _Vm_
5 Molares Volumen
# _R_
5 Universale Gas Konstante 
# _StdT_
5 Standardtemperatur 
# _StdP_
5 Standarddruck
# _sigma_
5 Stefan-Boltzmann-Konstante
# _c_
5 Vakuum-Lichtgeschwindigkeit
# _epsilon0_
5 Permittivität des Vakuums
# _mu0_
5 Permeabilität des Vakuums 
# _g_
5 Schwerebeschleunigung
# _G_
5 Gravitationskonstante
# _h_
5 Planks Konstante
# _hbar_
5 Dirac‘s Konstante
# _q_
5 Elektronenladung
# _me_
5 Elektronenrestmasse 
# _qme_
5 Spezifische Ladung (Verhältnis Ladung/Masse) des Elektrons
# _mp_
5 Protonrestmasse
# _mpme_
5 Spezifische Ladung (Verhältnis Ladung/Masse) des Protonen
# _alpha_
5 Feinstrukturkonstante 
# _phi_
5 Quantum magnetischer Fluss
# _F_
5 Faraday'sche Konstante
# _Rinfinity_
5 Rydberg-Konstante
# _RSun_
5 Sonnenradius
# _PSun_
5 Leistung der Sonnenoberfläche
# _mEarth_
5 Erdmasse
# _REarth_
5 Erdradius 
# _sd_
5 Dauer eines Sternentages
# _syr_
5 Dauer eines Sternenjahres (Sternzeit) 
# _a0_
5 Bohrradius
# _muB_
5 Bohrsches Magneton
# _muN_
5 Nukleares Magneton
# _lambda0_
5 Photonen-Wellenlänge (ch/e)
# _f0_
5 Photonen-Frequenz (e/h)
# _lambdac_
5 Compton-Wellenlänge
# _rad_
5 1 Rad
# _twopi_
5 Zwei Pi 2*pi
# _angl_
5 180 Grad Winkel
# _c3_
5 Wiensche Verschiebungs-Konstante
# _kq_
5 k/q (Boltzmann/Ladung des Elektrons)
# _epsilon0q_
5 epsilon0/q (Permittivität/Ladung des Elektrons)
# _qepsilon0_
5 q*epsilon0 (Ladung des Elektrons*Permittivität)
# _epsilonsi_
5 Dielektrizitätskonstante 
# _epsilonox_
5 Dielektrizitätskonstante von Silizium-Dioxid 
# _I0_
5 Referenzintensität 
# _a
5 a (100 m^2)
# _A
5 Ampère
# _acre
5 Hektar 
# _arcmin
5 Bogenminute
# _arcs
5 Bogensekunde
# _atm
5 Atmosphären 
# _au
5 Astronomische Einheit
# _Angstrom
5 Angstrom 
# _b
5 Barn
# _bar
5 bar
# _bbl
5 Barrel 
# _Bq
5 Becquerel 
# _Btu
5 Btu British thermal unit (Britische Temperatureinheit) 
# _bu
5 Bushel (Hohlmaß 1bu=8_galUK)
# _buUS
5 US bushel (amerikanischer Buschel, Hohlmaß)
5 Coulomb
# _cal
5 Kalorie
# _cd
5 Candela
# _chain
5 Chain (1 chain = 66 feet oder 22 yards)
# _Ci
5 Curie
# _ct
5 Carat
# _cu
5 US-Amerikanische Einheit cup
# _d
# _j
5 Tag
# _dB
5 Dezibel
# _dyn
5 Dyn
# _erg
5 Erg
# _eV
5 Elektronenvolt
# _F
5 Farad
# _fm
5 
# _fath
5 Fathom (nautischer Faden)
# _fbm
5 Fathom (nautischer Faden)
# _fc
5 Footcandle (1 footcandle entspricht 10.764 lux)
# _Fdy
5 Faraday
# _fermi
5 Fermi
# _flam
5 Footlambert (Einheit für die Leuchtdichte)
# _ft
5 Fuß (internationaler foot)
# _ftUS
5 Survey foot (US-Einheit)
# _g
5 Gramm
# _ga
5 Standard freefall (Standard freier Fall)
# _galUS
5 US Gallone
# _galC
5 Kanadische Gallone
# _galUK
5 Britische Gallon
# _gf
5 Gramm-Kraft (gravitatinal metric)
# _gmol
5 Gramm-mol
# _grad
5 Grad-mol
# _gon
5 Grad
# _grain
5 grain (Masseneinheit 1 grain entspricht 0,0648 Gramm)
# _Gy
5 Gray (Energiedosis)
# _H
5 Henry 
# _ha
5 Hektar 
# _h
5 Stunde
# _hp
5 horsepower (Pferdestärke)
# _Hz
5 Hertz
# _in
5 Inch
# _inHg
# _inH20
5 inches of mercury (inches (mehrzahl inch, US Längeneinheit) von Quecksilber), 0 Grad Celsius
# _J
5 Joule
# _K
5 Kelvin
# _kg
5 Kilogram
# _kip
5 Kilopound-force (1000 Pfund Gravitationskraft)
# _knot
5 Semeilen pro Stunde (Knoten)
# _kph
5 Kilometer pro Stunde
# _l
5 Liter
# _lam
5 Lambert
# _lb
5 Pfund (1 Pfund = 16 oz)
# _lbf
5 pound-force (Gewichtskraft eines Pfundes)
# _lbmol
5 Pfund-mol
# _lbt
5 troy pound
# _lm
5 Lumen
# _lx
5 Lux
# _lyr
5 Lichtjahr
# _m
# _Âµ
5 Micron
# _mho
5 Mho (andere Bezeichnung für Siemens)
# _mile
5 Internationale Meile
# _mil
5 Mil (angloamerikanischer Längenmaß)
# _miUS
5 US statute mile
# _mmHg
5 Millimeter Quecksilber (torr), 0 Grad Celsius
# _mol
5 Mol
# _mph
5 Meilen pro Stunde
# _N
5 Newton 
# _mille
5 Nautische Meile
# _Ohm
5 Ohm
# _oz
5 Unze
# _ozfl
5 US flüssige Unze
# _ozt
5 Troy ounce (Troy Unze, US Gewichtseinheit)
# _ozUK
5 UK flüssige Unze
# _P
5 Poise (Maß für Viskosität)
# _Pa
5 Pascal
# _pc
5 Parsec
# _pdl
5 Poundal (Kraft)
# _ph
5 Phot (alte Einheit für Beleuchtungsstärke)
# _pk
5 US peck (Maßeinheit des Raumes)
# _psi
5 Pfund pro Quadratinch
# _liqpt
5 US liquid pint (1_galUS=8_liqpt) (US Volumeneinheit)
# _ptUK
5 Britisches pint (Volumeneinheit 1_galUK=8_ptUK)
# _qt
5 Viertel (eines Gallons)
# _rad
5 Radiant (Art Winkel anzugeben)
# _R
5 Röntgen 1_R= 
# _rd
5 Rad 1_rd=0.01_Gy
# _rod
5 Rod (Rute) 1_rod=5.029215842_m
# _rem
5 Rem (Einheit für Strahlendosis)
# _rpm
5 Umdrehungen pro Minute
# _s
5 Sekunde
# _S
5 Siemens
# _sb
5 Stilb (alte Einheit für die Leuchtdichte)
# _slug
5 Slug (US Maßeneinheit)
# _sr
5 Steradiant (Einheit für den Raumwinkel)
# _st
5 Ster (Volumenmaß, oft für Brennholz verwendet)
# _St
5 Stokes
# _Sv
5 Sievert
# _t
5 Metrische Tonne
# _T
5 Tesla
# _tbsp
5 Tablespoon (Esslöffel)
# _therm
5 EEC therm
# _ton
5 short ton (kurze Tonne, 1 short ton = 2000 pounds bzw. Pfund)
# _tonUK
5 long ton (UK)
# _torr
5 Torr (mmHg)
# _tsp
5 Teaspoon (Teelöffel)
# _u
5 Atomare Maßeneinheit
# _V
5 Volt
# _W
5 Watt
# _Wb
5 Weber
# _yd
5 internationaler yard
# _yr
5 Jahr
# grid_paper
5 Zeichnet in das Rechteck [xmin..xmax]*[ymin..ymax], die Linien eines Netzwerks, konstruiert durch die Linien y=n*uy und in der Achse OxY des Winkels t!=0 mit den Linien x=n*ux
# line_paper
5 Zeichnet das Rechteck [xmin..xmax]*[ymin..ymax] mit den Linien x=n*ux in Richtung der Achse Oxy mit dem Winkel t!=0
# triangle_paper
5 Zeichnet ein Rechteck [xmin..xmax]*[ymin..ymax] mit den Linien eines Netzwerks konstruiert durch y=n*uy und in Richtung der Achse OxY mit dem Winkel t!=0 mit den Linien x=n*ux und ux*y+uy*x=n*ux*uy. 
# dot_paper
5 Zeichnet ein Rechteck [xmin..xmax]*[ymin..ymax] mit den Schnittpunkten des Netzwerks konstruiert durch die Linien y=n*uy und in Richtung der Achse OxY mit dem Winkel t!=0 Linien konstruiert durch x=n*ux
# ufactor
5 Faktorisiert eine Einheit in einem Objekt, dass eine Einheit hat
# usimplify
5 Vereinfacht eine Einheit in einem Objekt mit Einheit
# Celsius2Fahrenheit
5 Wandelt Celsius in Fahrenheit um.
# Fahrenheit2Celsius
5 Wandelt Fahreinheit zu Celsius um.
# mksa
5 Wandelt Einheiten in die Einheiten des Internationalen MKSA-Systems um
# CST
5 Name einer Variablen, die es erlaubt in einer Binde ein Menü zu erstellen. Dafür muss man "cust" drücken.
# isopolygon
5 Zeichnet ein reguläres Vieleck mit abs(n) Vertices, gegeben durch 2 Vertices (oder 2 und einem Punkt in der Ebene), wenn n>0 oder gegeben durch einen Vertex (oder sein Zentrum + einen Punkt in der Ebene), wenn n<0.
# arc
5 Zeichnet einen Kreisbogen gegeben durch zwei Vertices and den Winkel am Zentrum [Xcas wird das Zentrum in C und den Radius in r legen]
# makesuite
5 Gibt eine Folge, die mit einem Vektor gemacht wurde, zurück.
# makevector
5 Gibt einen Vektor zurück, der mit einer Folge gemacht wurde.
# interval2center
5 Gibt das Zentrum eines Intervalls oder eines Objektes zurück.
# center2interval
5 Gibt die Liste von Intervallen zurück, die mit a0 beginnen und die Liste l als Zentrum haben.
# border
5 Gibt die Matrix zurück, die man erhält, wenn man b von rechts an A anfügt. Wenn nrows(A)=size(b), border(A,b)=tran(append(tran(A),b)).
# JordanBlock
5 Gibt eine n*n Matrix zurück, die a auf der Diagonalen, 1 darüber und 0 sonst hat. 
# blockmatrix
5 Gibt die Matrix zurück, die man erhält, wenn man eine Liste in n Listen der Länge m zerteilt. 
# row
5 Gibt die Reihe n oder die Folge der Reihen n1..n2 der Matrix A zurück, oder mit den optionalen Argumenten: count,count_eq,count_inf,count_sup.
# col
5 Gibt die Spalte n oder die Folge der Reihen n1..n2 der Matrix A zurück, oder mit den optionalen Argumenten: count,count_eq,count_inf,count_sup.
# delrows
5 Gibt die Matrix zurück, bei der die Zeilen n1..n2 (oder n1) der Matrix A gelöscht wurden.
# delcols
5 Gibt die Matrix zurück, bei der die Spalten n1..n2 (oder n1) der Matrix A gelöscht wurden.
# frequencies
5 Gibt die Häufigkeit eines Wertes in einer Liste zurück
# cumulated_frequencies
5 Zeichnet das Diagramm der kumulierten Häufigkeiten (Zeilen = [Wert, Häufigkeit])
# is_element
5 Gibt 1 zurück, wenn der Punkt auf einem geometrischen Objekt ist. Sonst wird 0 zurückgegeben.
# NewPic
5 Kreiert ein Bild namens pic1, welches aus den Punkten gemacht ist, die durch die Zeilen von A definiert werden.
# RclPic
5 Fügt zu der Grafik im DispG Bildschirm das Bild, welches mit "StoPic" gespeichert wurde, hinzu.
# RplcPic
5 Lösche und ersetze die Grafik im DisG Bildschirm, mit der Grafik in "StoPic".
# non_recursive_normal
5 Vereinfacht die Ausdrücke, aber ohne dabei im Ergebnis nicht-rationale Ausdrücke zu verwenden.
# evalc
5 Gibt einen komplexen Ausdruck in der vereinfachten Form real+i*imag zurück.
# copy
5 A:=copy(B) kopiert die Liste oder Matrix B in A.
# zip
5 Gibt die Liste zurück, bei der der j-te Eintrag f(l1[j],l2[j]) ist: Wenn kein Wert angegeben wird, ist die Länge das Minimum der beiden Listen in den Argumenten. Sonst wird die kürzere Liste mit dem angegeben Wert aufgefüllt.
# unquote
5 Wertet einen zitierten Ausdruck aus (Zum Beispiel purge(c);a:=c;unquote(a):=3; setzt 3 in die Variablen a und c ein).
# time
5 Gibt die Zeit zurück, die nötig ist, um einen Befehl zu berechnen oder die Zeit seit Beginn der Sitzung.
# DropDown
5 In einem Programm, Instruktion eines Dialogfensters. 
# Request
5 In einem Programm, Instruktion eines Dialogfensters. 
# Text
5 In einem Programm, Instruktion eines Dialogfensters. 
# Title
5 In einem Programm, Instruktion eines Dialogfensters. 
# Dialog
5 In einem Programm, macht Einträge: Dialog{Title("title");Text("Schüler"+ string(c));Request("Name=",a);Request("Alter=",b);DropDown("Stufe",["eins","zwei"],n);}
# choosebox
5 In einem Programm, macht einen Eintrag mit der Anzeige einer Liste, aus der gewählt werden kann.
# rdiv
5 Teilung von a durch b (vorangestellte Lösung von /)
# unapply
5 Gibt eine Funktion zurück, die von einem Ausdruck definiert wird.
# RandSeed
5 Initialisiert zufällige Zahlen.
# semi_augment
5 Gibt eine Matrix zurück, die aus A und B gemacht wurde. Diese hat n1+n2 Zeilen und p Spalten, wenn dim(A)=[n1,p] und dim(B)=[n2,p].
# goto
5 Wird in einem Programm genutzt, um zu einer Instruktion mit der Bezeichnung nom zu springen.
# label
5 Wird benutzt, um in einem Programm eine Instruktion mit der Bezeichnung nom zu versehen. 
# lsmod
5 Zeigt die Liste installierter dynamischen Bibliotheken an (Dynamik Libraries).
# insmod
5 Installiert ein dynamisches Modul, indem es die Befehle, die zum Beispiel aus dem Ordnerlibprogfr.so sind, kreiert. Der Pfad zu dem Ordner wird angegeben. 
# rmmod
5 Entfernt die installierten dynamischen Bibliotheken.
# widget_size
5 Ändert die Größe der Zeichen auf dem Bildschirm von Xcas (Größe=n) und mit mehr Parametern kann man auch allgemeine Einstellungen vornehmen. 
# CyclePic
5 Erschafft eine automatische Folge von n Bilder (die z.B. in StoPic gespeichert wurden, mit den Namen des1, des2, des3..desn). Diese werden n mal angezeigt mit einer Pause von p Sekunden, zwischen jedem Bild.
# StoPic
5 Da, um mehrere Grafiken in einer Variablen mit dem selben Pfad-Namen zu speichern (radical1,radical2..) und dann die Grafiken in CyclePic zu animieren. 
# SortA
5 Sortiert die Liste mit aufsteigender Reihenfolge (wie TI). Alternativ die erste Zeile einer Matrix in aufsteigender Reihenfolge, wobei die Spalten beibehalten werden. 
# SortD
5 Sortiert die Liste mit absteigender Reihenfolge (wie TI). Alternativ die erste Zeile einer Matrix in absteigender Reihenfolge, wobei die Spalten beibehalten werden. 
# sorta
5 Sortiert eine Liste mit aufsteigender Reihenfolge oder die erste Matrixzeile mit aufsteigender Reihenfolge und mit gleichbleibenden Spalten.
# sortd
5 Sortiert die Liste mit absteigender Reihenfolge (wie TI). Alternativ die erste Zeile einer Matrix in absteigender Reihenfolge, wobei die Spalten beibehalten werden. 
# restart
5 Gibt alle Variablen frei. 
# product
5 Multipliziert den Wert des Ausdrucks, wenn die Variable von a zu b, mit dem Schritt p geht(product(expression,var,begin,end,step). Ohne Spezifikation p=1 Alternativ Produkte der Elemente einer Liste oder Produkte von Term zu Term der Elemente von zwei Listen oder Matrizen. 
# maple_ifactors
5 Gibt 1 oder -1 für das Vorzeichen und die Primfaktoren der Zahl n zurück (mit ihren Multiplizitäten), in Form einer Matrix. So wie ifactors in Maple.
# .+
5 Vollführt eine Summe Element zu Element von 2 Listen oder 2 Matrizen. Alternativ wird $a$ zu jedem Element einer Liste oder Matrix addiert. (infix-Operator, TI kompatibel)
# .-
5 Vollführt eine Subtraktion per Element von 2 List oder 2 Matrizen. Alternativ wird $a$ von jedem Element einer Liste oder Matrix subtrahiert. (infix-Operator, TI kompatibel)
# ./
5 Vollführt eine Division per Element von 2 Listen oder 2 Matrizen (infix-Operator, TI kompatibel)
# .*
5 Vollführt eine Multiplikation per Element von 2 Listen oder 2 Matrizen (infix-Operator, TI kompatibel)
# .^
5 Berechnet die Potenz eines jeden Elements einer Matrix (infix-Operator, TI kompatibel) 
# &^
5 Berechnet die n-te Potenz eines jeden Elements einer Matrix (infix-Operator, TI kompatibel)
# ^
5 Berechnet die n-te Potenz einer Zahl (infix-Operator).
# matpow
5 Berechnet die n-te Potenz einer Matrix, indem die Jordannormalform verwendet wird. 
# &*
5 Matrixmultiplikation (infix-Operator, &* kompatibel mit Maple) 
# +
5 Verkettung zweier Strings oder Addition per Element von zwei Ausdrücke, Listen oder Matrizen (infix-Operator) 
# +&
5 Verkettung zweier Strings oder Addition per Element von zwei Ausdrücke, Listen oder Matrizen (infix-Operator, TI Kompatibilität) 
# inputform
5 Wird in einem Programm benutzt, um Einträge zu machen. 
# #
5 Transformiert (in einem Programm) einen String in den Namen einer Variablen
# fMax
5 Gibt die Abszisse des Maximums eines Ausdrucks zurück.
# fMin
5 Gibt die Abszisse des Minimums eines Ausdrucks zurück. 
# DrawInv
5 Zeichnet den Grafen der Spiegelung des Ausdrucks bezüglich y=x.
# cFactor
5 Faktorisierung des Ausdrucks in ℂ‚ (Auf Gaußsche Zahlen, wenn dort mehr als zwei Variablen sind.)
# atrig2ln
5 Schreibt den Ausdruck, der inverse trigonometrische Funktionen beinhaltet, indem logarithmische Funktionen benutzt werden.
# LineHorz
5 Zeichnet die horizontale Linie y=a.
# Line
5 Zeichnet das Segment [a+i*b,c+i*d].
# LineVert
5 Zeichnet die vertikale Linie x=a. 
# plot3d
5 Lösche und plotte einen Ausdruck mit zwei Variablen oder eine Oberfläche, definiert mit einer Liste von drei Funktionen oder von drei Ausdrücken mit zwei Variablen. 
# subMat
5 Extrahiere eine Unter-Matrix mit dem ersten Element=A[n1,n2] und dem letzten Element A[n3,n4].
# table
5 Definiert ein arrey, bei dem der Index aus Strings oder reellen Zahlen besteht, alternativ eine Tabelle mit einer Matrix.
# read
5 Liest aus der Datei fich_name die Variablen und deren Werte. 
# write
5 Schreibt in die Datei fich_name die Variablen und deren Werte. 
# nodisp
5 Zeigt Done anstatt eines Wertes an. 
# subsop
5 Ersetzt in der Liste (oder der Matrix) das Element an Stelle n mit dem Ausdruck (bei Maple werden die Argumente vertauscht) (NULL entfernt das Element)
# mRowAdd
5 Multipliziert die Zeile n1 der Matrix A mit Xpr und addiert sie dann auf Zeile n2.
# scaleadd
5 Multipliziert die Zeile n1 der Matrix A mit Xpr und addiert sie danach auf Zeile n2.
# mRow
5 Multipliziert die Zeile n1 der Matrix A mit Xpr.
# scale
5 Multipliziert die Zeile n1 der Matrix A mit Xpr.
# mathml
5 Wandelt den Ausdruck in einen String um, sodass die Mathematik im Netz angezeigt werden kann. 
# fracmod
5 Gibt den Bruch a/b so zurück, dass b*Xpr=a mod n, -sqrt(n)/2<a<=sqrt(n)/2 und 0<=b<sqrt(n)/2.
# Beta
5  Beta(a,b)=int(t^(a-1)*(1-t)^(b-1),t=0..1), Beta(a,b,p)=int(t^(a-1)*(1-t)^(b-1),t=0..p), Beta(a,b,p,1)=Beta(a,b,p)/Beta(a,b).(Beta(x,y) returns Gamma(x)*Gamma(y)/Gamma(x+y)).
# cat
5 Evaluiert die Argumente und verkettet sie anschließend in einen String.
# compare
5 Gibt 1 zurück, wenn type(arg1)<type(arg2) oder wenn type(arg1)=type(arg2)
# Col
5 Gibt die Zahl der Spalte der erleuchteten Zelle im Matrix-Editor zurück.
# Row
5 Gibt die Zahl der Zeile der erleuchteten Zelle im Matrix-Editor zurück.
# heugcd
5 Größter gemeinsamer Nenner von 2 Polynomen, mit dem sogenannten „heuristische pgcd“-Algorithmus. 
# modgcd
5 Größter gemeinsamer Nenner von 2 Polynomen mit dem modularen Algorithmus.
# psrgcd
5 Größter gemeinsamer Nenner von 2 Polynomen mit dem Unterresultat-Algorithmus.
# ezgcd
5 Größter gemeinsamer Nenner von 2 Polynomen mit mindestens 2 Variablen, mit dem ezgcd Algorithmus. 
# icontent
5 Größter gemeinsamer Nenner der ganzzahligen Koeffizienten eines Polynoms.
# polygonplot
5 Zeichnet das Polygon, dass für j fixiert und für k=0..nrows die Punkte (xk,yk) zusammenführt, wobei xk = Element Zeile k, Spalte 0 und yk= Element Zeile k Spalte j, wenn die xk sortiert sind. (Wir erhalten ncols-1 Polygone)
# polygonscatterplot
5 Zeichnet die Punkte (xk,yk) und zeichnet das Polygon, dass für j fixiert und für k=0..nrows die Punkte (xk,yk) zusammenführt, wobei xk = Element Zeile k, Spalte 0 und yk= Element Zeile k Spalte j, wenn die xk sortiert sind. (Wir erhalten ncols-1 Polygone)
# scatterplot
5 Zeichnet für k=0..nrows, die Punkte (xk,yk), wobei xk=Element Zeile k, Spalte 0 und yk=Element Zeile k Spalte j (j=1..ncols). 
# user_operator
5 Definition eines binären Operators, der 0 (Fehlschlag) oder 1 (Erfolg) zurückgibt. 
# count_eq
5 Gibt die Zahl der Elemente von L gleich a an. 
# count_inf
5 Gibt die Zahl der Elemente von L echt kleiner a an.
# count_sup
5 Gibt die Zahl der Elemente von L echt größer a an.
# root
5 Gibt b^(1/a) (root(2,3)=sqrt(3)) zurück.
# latex
5 Gibt den ausgewerteten Ausdruck in Latex geschrieben zurück.
# plotcontour
5 Zeichnet entweder 11 gleich verteilte Konturlinien z=z_min,…,z=z_max der Oberfläche z=Ausdruck oder die Konturlinien definiert durch das dritte Argument.
# Circle
5 Zeichnet den Kreis mit dem Zentrum (xc,yc) und dem Radius r (Ohne Spezifikation = 1 und Option=0 löscht den Kreis).
# version
5 Gibt die Nummer der giac Version zurück, die Sie benutzen: giac 0.4.0
# seq
5 Gibt die Folge (2 oder 3 arg) oder die Liste (4 oder 5 arg), die man erhält, wenn var von a zu b läuft (Schritt p) in Xpr (oder die Xpr wird n mal wiederholt oder die Folge reeller Zahlen von a zu b (Schritt p)). Auch ist seq(expression,variable,liste) equivalent zu map(liste,unapply(expression,variable)) 
# $
5 infix Version von seq. 
# roots
5 Gibt eine Matrix mit zwei Spalten zurück, bei der die Zeilen die Nullstellen des Polynoms mit ihrer Multiplizität sind (für eine Variable)
# pivot
5 Gibt die Matrix zurück, die man von A erhält, wenn Nullen in der Spalte nc sind, die man mit der Gauß-Jordan Methode kreiert (mit dem Element A[nl,nc] als Pivotelement).
# cZeros
5 Gibt die Liste der komplexen Lösungen von Xpr=0 an oder die Matrix, bei der die Zeile die Lösung des Systems: Xpr1=0, Xpr2=0,.. ist.
# srand
5 srand gibt eine ganze Zahl zurück und initialisiert eine Folge von zufälligen Zahlen. 
# powexpand
5 Entwickelt den Ausdruck als Funktion des Exponenten.
# mult_c_conjugate
5 Gibt den Ausdruck zurück, nachdem sie mit dem komplex konjugierten des Nenners multipliziert wurde. (oder des Zählers, wenn es keinen Nenner gibt)
# mult_conjugate
5 5 Gibt den Ausdruck zurück, nachdem sie mit dem konjugierten des Nenners multipliziert wurde. (oder des Zählers, wenn es keinen Nenner gibt)
# comDenom
5 Gibt den Ausdruck zurück, nachdem sie auf den selben Nenner gebracht wurde. Nenner und Zähler werden entwickelt [bezüglich Potenzen der Variable var].
# cumSum
5 Gibt die Liste (oder die Folge oder den String) lr zurück, bei dem die Elemente die kumulierte Summe der Liste l: lr[k]=sum(l[j],j=0..k) ist (oder lr=sum(l[j],j=0..k)$(k=0..size(l)-1)).
# normalize
5 Gbt den Vektor geteilt durch seine l2-Norm zurück. Es ist zudem eine Option für plotfield.
# l1norm
5 Gibt die l1-Norm eines Vektors zurück=Summe der Beträge der Einträge. Alternativ die l1 Norm einer Matrix, die genauso funktioniert.
# Int
5 Gibt die Stammfunktion oder die Berechnung des Integrals zurück (Grenzen a und b) ohne Evaluation.
# dfc2f
5 Transformiert einen Kettenbruch in eine reelle Zahl.
# dfc
5 Gibt die Entwicklung des Kettenbruchs von x0 der Ordnung n zurück. Alternativ wird bis zur Präzision eps entwickelt.
# det_minor
5 Gibt die Determinante zurück, die durch Streichungsmatrizen berechnet wird.
# rm_all_vars
5 Löscht alle Variablennamen. 
# rm_a_z
5 Löscht alle Variablennamen, die nur einen Kleinbuchstaben a..z haben. 
# risch
5 Gibt die Stammfunktion eines Ausdrucks zurück, die mit dem Risch-Algorithmus berechnet wurde.
# rowAdd
5 Gibt die Matrix zurück, die man erhält, wenn man in A die n2-te Zeile mit der Summe aus n1-ten und n2-ten Zeile ersetzt. 
# rowSwap
5 Gibt die Matrix zurück, die man erhält, wenn man die n1-ste und die n2-te Zeile vertauscht.
# colSwap
5 Gibt die Matrix zurück, die man erhält, wenn man die n1-ste und die n2-te Spalte vertauscht. 
# variance
5 Gibt die Varianz einer Liste zurück. Im zweiten Argument wird die Gewichtung festgelegt. Auch kann die Liste der Varianzen der Spalten einer Matrix zurückgegeben werden. 
# erf
5 Gibt den approximativen Wert von 2/sqrt(pi)*int(exp(-t^2),t,0,x0) zurück.
# erfc
5 Gibt den approximativen Wert von 2/sqrt(pi)*int(exp(-t^2),t,x0,+infinity) zurück.
# reduced_conic
5 Gibt den Ursprung und die Matrix einer Basis zurück, in der der Kegelschnitt, gegeben durch seine Gleichung, reduziert ist. Zudem wird zurückgegeben: 0 oder 1 (0 wenn der Kegelschnitt entartet ist), sowie die Gleichung des Kegelschnittes in dieser Basis und seine parametrische Gleichung.
# reduced_quadric
5 Gibt den Ursprung und die Matrix einer Basis zurück, in der die Quadrik (gegeben durch seine Gleichung) reduziert ist. Zudem wird angegeben: Die Liste der Eigenwerte, die Gleichung der Quadrik in dieser Basis und die parametrische Gleichung.
# parallelogram
5 Zeichnet und gibt das Parallelogramm ABCD wieder, sowie Vektor(AB)+Vektor(AD)=Vektor(AC).
# subs
5 Equivalent zu subst, außer das in maple_mode, indem die Argumente vertauscht sind. Im maple_mode wähle man Beispiel 2
# simult
5 Gibt die Matrix zurück, bei der die k-te Spalte die Lösung von A*X= k-te Spalte von B(=B[0..nl-1,k..k] ist.
# Pause
5 Pause; In einem Programm wird dessen Ausführung gestoppt (Diese wird fortgesetzt, wenn Eingabe gedrückt wird). [Pausen; unterbricht die die Ausführung für n Sekunden]
# WAIT
5 WAIT(n); in einem Programm wird die Ausführung für n Sekunden angehalten.
# part
5 Gibt den n-ten Sub-Ausdruck des Ausdrucks an.
# newList
5 Gibt eine Liste mit n Nullen zurück.
# newMat
5 Gibt die Liste mit n Zeilen und p Spalten zurück, voll mit Nullen.
# QR
5 Für eine numerische Matrix A, wird in Q eine orthogonale Matrix und in U eine obere Dreiecksmatrix mit A=Q*R gespeichert. [O wird ausgetauscht durch Elemente mit abs(el)<eps]
# LQ
5 Für eine numerische Matrix A, wird eine untere Dreiecksmatrix L, eine orthogonale Matrix Q und eine Permutationsmatrix P wiedergegeben, sodass P*A=L*Q ist. 
# LU
5 Für eine numerische Matrix A, wird in L eine untere Dreiecksmatrix, in U eine obere Dreiecksmatrix und in P eine Permutationsmatrix gespeichert, sodass P*A=L*U.
# SVD
5 Singulärwertzerlegung einer numerischen reellen Matrix A, gibt U orthogonale Matrix, S den Vektor der Singulärwerte von A und eine orthogonale Matrix U zurück, sodass A=U*diag(S)*trn(Q).
# SVL
5 Für eine numerische reelle Matrix A wird der Singulärwert-Vektor wiedergegeben. Also sqrt(eigenvals(A*trn(A))).
# LSQ
5 Gibt den Vektor (bzw. die Matrix) X zurück, die die euklidische Norm (bzw. die Frobeniusnorm) von A*X-B minimiert. Dies korrespondiert dem linearem Gleichungssystems A*X=B, wenn B ein Vektor (bzw. eine Matrix) ist. 
# iPart
5 Gibt das Argument ohne seinen Bruchzahl-Teil zurück. (type=DOM_FLOAT).
# trunc
5 Kürzt das Argument auf n Dezimale Stellen (ohne Spezifikation n=0). Komplexe Zahlen werden akzeptiert. (type=DOM_COMPLEX oder DOM_FLOAT).
# fPart
5 Gibt die Bruchzahl zurück.
# output
5 Instruktion in einem Programm, sodass man einen in var gespeicherten Ausdruck ausgeben kann. 
# input
5 Instruktion in einem Programm, die erlaubt einen Ausdruck in var zu speichern.
# InputStr
5 Instruktion in einem Programm, mit der man einen String eingeben kann und in var speichern kann.
# getType
5 Gibt den Typ des Argumentes zurück(STR,EXPR,FUNC,NUM,LIST,MAT,VAR,NONE,PIC…).
# getKey
5 Instruktion in einem Programm, die 0 zurückgibt, wenn keine Taste gedrückt ist und sonst den ASCII Code der gedrückten Taste zurückgibt.
# string
5 Gibt den ausgewerteten Ausdruck als String zurück. Kann auch als Option des convert/convertir Befehls genutzt werden (id string)
# list
5 Option des convert oder convertir Befehls (n-poly=>list).
# polynom
5 Option des convert oder convertir Befehls und der Befehle taylor und series (list=>n-poly oder series=>poly).
# denom
5 Gibt den Nenner des vereinfachten Bruches zurück.
# getDenom
5 Gibt den Nenner des nicht vereinfachten Ausdruck zurück (außer für rationale Zahlen)
# getNum
5 Gibt den Zähler des nicht vereinfachten Ausdruck zurück (außer für rationale Zahlen)
# numer
5 Gibt den Zähler des vereinfachten Bruches zurück.
# DrawSlp
5 Zeichnet die Linie mit Steigung m, die durch den Punkt (a,b) geht: y-b=m(x-a).
# findhelp
5 Zeigt die Hilfe des Befehls an (wenn ? eingefügt ist siehe when).
# Fill
5 Füllt die Liste oder die Matrix, die in A gespeichert wurde mit Xpr
# expr
5 Instruktion die einen String in einen Befehl oder eine Zahl umformt.
# list2exp
5 Inverse exp2list
# exp2list
5 Gibt die Liste wieder, die mit der rechten Seite von (var=expr0 oder var=expr1) gemacht wurde, damit sie nach der Lösung im TI Modus verwendet werden kann. 
# ClrGraph
5 Löscht alle Grafen und die geometrischen Objekte auf dem Grafikbildschirm DispG.
# NewFold
5 Erstellt einen neuen Ordner, indem man sich danach befindet.
# SetFold
5 Gibt den Namen des aktuellen Ordners zurück und wählt den angewählten Namen als neuen Ordner (main für den Ursprungsordner). 
# DelFold
5 Löscht den gewählten Ordner (Es gibt eine Fehlermeldung, wenn dieser Ordner nicht leer ist).
# GetFold
5 Gibt den Namen des aktuellen Ordners zurück.
# avgRC
5 Gibt (Xpr(var+h)-Xpr(var))/h zurück (ohne Spezifikation h=0.001).
# nDeriv
5 Gibt eine Näherung für den Wert der Ableitung an einem Punkt:(Xpr(var+h)-Xpr(var-h))/(2*h) (ohne Spezifikation h=0.001).
# Archive
5 Schützt die Variablen, die im Argument gegeben wurden in einer Archiv-Datei
# Unarchiv
5 Hebt den Schutz der Variable im Argument auf.
# archive
5 Archiviert den Wert einer Variable oder einer Liste von Variablen, die im Argument gegeben werden. Dies geschieht in einer spezifischen Datei (Lesbar mit unarchive). 
# unarchive
5 Liest den Wert einer Variable oder einer Liste von Variablen, welche in einer Datei, die im Argument übergeben wird, sind (Datei mit archive erstellt).
# CopyVar
5 Kopiert den Speicher, ohne Evaluation von var1 in var2.
# csolve
5 Gibt die Liste der komplexen Lösungen einer Gleichung, alternativ einer Matrix zurück, wobei die Zeilen die komplexen Lösungen eines Systems polynomialer Gleichungen sind.
# arcLen
5 Gibt die Länge eines Bogens oder einer Kurve definiert durch y=Xpr(oder durch x=Xpr1,y=Xpr2) zurück. Die Werte des Parameters sind zwischen a und b. 
# cas_setup
5 Dieser Befehl erlaubt den cas zu initialisieren: Approx,Cplx_var,Cplx,Angle,Format,Epsilon,Digit 
# about
5 Gibt die Annahme zur Variable a, die mit assume gemacht wurde, wieder
# abscissa
5 Gibt die Abszisse einer Punkts oder Vektors wieder. 
# multinomial
5 Gibt n!/(k0!*k1!*..;kj!)*(p0^k0*p1^k1..*pj^kj) zurück (sum(p)=1 und sum(k)=n).
# binomial
5 Gibt comb(n,k)*p^k*(1-p)^(n-k) zurück oder comb(n,k), wenn es kein drittes Argument gibt.
# binomial_cdf
5 Gibt Proba(X<=x) oder Proba(x<=X<=y) zurück, wenn X die B(n,P)-Verteilung einhält. 
# binomial_icdf
5 Gibt h zurück, sodass Proba(X<=h)=t, wenn X der B(n,p)-Verteilung folgt.
# negbinomial
5 Gibt comb(n+k-1,k)*p^k*(1-p)^n zurück.
# 
5 Gibt Proba(X<=x) oder Proba(x<=X<=y) zurück, wenn X der negbinomial(n,p)-Verteilung (negative Binomialverteilung) folgt.
# negbinomial_icdf
5 Gibt h zurück, sodass Proba(X<=h)=t, wenn X der negbinomial(n,p)-Verteilung (negative Binomialverteilung) folgt. 
# colspace
5 Gibt eine Matrix zurück, deren Spalten einen Basis für den Vektorraum, generiert von den Spalten der Matrix A, sind[d ist die Dimension dieses Raumes].
# @@
5 f @@ n is die Funktion fof..of (nmal) (infix-Operator)
# @
5 Ist der infix-Operator für die Komposition von Funktionen.
# angle_radian
5 Pseudo-Variable, um mit Radiant (angle_radian:=1) oder Grad (angle_radian:=0) zu arbeiten.
# approx_mode
5 Pseude-Variable, um im approximativen Modus (approx_mode:=1) oder im exakten Modus (approx_mode:=0) zu arbeiten.
# complex_mode
5 Pseudo-Variabel, um im komplexen (complex_mode:=1) oder im reellen (complex_mode:=0) zu arbeiten.
# complex_variables
5 Pseudo-Variabel, um mit komplexen Variablen (complex_variables:=1) oder mit reellen Variablen (complex_variables:=2) zu arbeiten. 
# variables_are_files
5 Pseudo-Variable um zu spezifizieren, ob man die Variable als Datei speichern möchte. „nameofthevariable.cas“.
# Digits
5 Pseudo-Variable, um die Anzahl der signifikanten Stellen zu modifizieren (Digits:=n).
# function_diff
5 Gibt die Ableitung von der Funktion f zurück.
# id
5 Name der Identitätsabbildung.
# ordinate
5 Gibt die Ordinate eines Punktes oder Vektors zurück. 
# poisson_cdf
5 Gibt Proba(X<=x) zurück, wenn X der Poissonverteilung folgt, mit myals Median. 
# poisson_icdf
# poisson
5 Gibt exp(-mu)*mu^k/k! Zurück.
# rowspace
5 Gibt eine Matrix zurück, deren Zeilen die Basis eines Vektorraums sind, der von den Zeilen der Matrix A generiert wurde. 
# sq
5 Ist der Name der Funktion (R^n?R)=Summe der Quadrate der Argumente. 
# linear_interpolate
5 Macht eine reguläre Stichprobe einer polygonalen Linie, die durch zwei Zeilen einer Matrix definiert wurde.
# logistic_regression
5 Gibt y,y',C,y'max,xmax,R : y ist eine logistische Funktion (Lösung von y‘/y=a*y+b), sodass y(x0)=y0 und [y‘(x0),y‘(x0+1)..] die beste Approximation von L ist. 
# logistic_regression_plot
5 Gibt den Plot einer logistischen Funktion y wieder, sodass y(x0)=(y0) und [y‘(x0),y‘(x0+1)…] die beste Approximant von L ist.
# linear_regression
5 Gibt die Koeffizienten a und b von y=a*x+b zurpck; Dies ist die beste Gerade, die die Punkte approximiert, deren Koordinaten durch die Zeilen von A (oder zwei Listen) gegeben wurden.
# linear_regression_plot
5 Gibt den Plot von y=a*x+b zurück: Die beste Gerade, die die Punkte approximiert, die durch die Zeilen von A (oder zwei Listen) gegeben wurden.
# logarithmic_regression
5 Gibt die Koeffizienten a und b von y=a*ln(x)+b zurück: Das ist die beste logarithmische Funktion, die die Punkte approximiert, die durch die Zeilen von A (oder zwei Listen) gegeben wurden.
# logarithmic_regression_plot
5 Gibt den Plot y=a*ln(x)+b zurück: Das ist die beste logarithmische Funktion, die die Punkte approximiert, die durch die Zeilen von A (oder zwei Listen) gegeben wurden.
# polynomial_regression
5 Gibt die Koeffizienten (an,…,a1,a0) von y=an*x^n+..a1x+a0) zurück: Das ist die beste polynomiale Funktion, die die Punkte approximiert, die durch die Zeilen von A (oder zwei Listen) gegeben wurden (n ist das zweite Argument).
# polynomial_regression_plot
5 Gibt den Plot von y=an*x^n+..a1x+a0) zurück: Das ist die beste polynomiale Funktion, die die Punkte approximiert, die durch die Zeilen von A (oder zwei Listen) gegeben wurden (n ist das zweite Argument).
# power_regression
5 Gibt die Koeffizienten (m,b) von y=b*x^m zurück: Es ist das beste Monom, welche die Punkte approximiert, die durch die Zeilen von A gegeben wurden (oder zwei Listen).
# power_regression_plot
5 Gibt den Plot von y=b*x^m zurück: Es ist das beste Monom, welche die Punkte approximiert, die durch die Zeilen von A gegeben wurden (oder zwei Listen).
# parfrac
5 Option des convert oder convertir Befehls (id bei der Option partfrac).
# confrac
5 Option des convert oder convertir Befehls (Beispiel id L:=dfc(sqrt(2),1e-10)).
# interval
5 Option des convert oder convertir Befehls.
# convert
5 Gibt den Wert von cmd(Xpr) zurück. cmd ist der Name eines Befehls spezifiziert durch das zweite Argument (zum Beispiel Option sin=commande trigsin).
# base
5 Option für convert: convert(p,base,b)= [a0,a1,..an] oder convert([a0,a1,..an],base,b)=p mit p=a0+a1*b+....an*b^(n-1).
# array
5 Option für convert für Definitionen von dünnbesetze Matrizen. 
# lcoeff
5 Gibt die Koeffizienten des Terms mit der höchsten Ordnung in einem Polynom zurück. (l=leading=führend).
# tcoeff
5 Gibt die Koeffizienten des Terms mit der niedrigsten Ordnung in einem Polynom zurück. (t=trailing).
# list2mat
5 Gibt die Matrix mit n Spalten zurück, deren Terme durch l gegeben wurden, eventuell durch 0 aufgefüllt. 
# mat2list
5 Gibt die Liste der Terme einer Matrix zurück.
# deltalist
# multiply
5 Gibt das Produkt von 2 Argumenten zurück.
# accumulate_head_tail
5 Gibt die Liste zurück, bei der die ersten p und die letzten q Elemente von l durch ihre Summe ersetzt wurden.
# square
5 Zeichnet und gibt zurück das Quadrat der Seite AB (ABCD ist direkt) (in der Ebene ABP). 
# hexagon
5 Zeichnet und gibt zurück das Hexagon der Seite AB (ABCDEF ist direkt) (in der Ebene ABP)
# rhombus
5 Zeichnet und gibt zurück die Raute ABCD, sodass der Winkel (AB,AD)=a (oder in der Ebene ABP Winkel(AB,AD)=(AB,AP) ). 
# polygon
5 Zeichnet und gibt zurück das Polygon (Vieleck) dessen Vertices die Elemente von l sind.
# open_polygon
5 Zeichnet und gibt zurück den Polygonzug, dessen Vertices die Elemente von l sind.
# quadrilateral
5 Gibt das Viereck ABCD zurück und zeichnet es. 
# rectangle
5 Zeichnet und gibt zurück das Rechteck ABCD, AD=k*AB wenn k>0 ist ABCD direkt ansonsten ist es indirekt (in der Ebene ABP AD=AP oder AD=k*AB).
# Airy_Ai
5 Gibt den Wert von Ai zurück. Ai ist die Airy-Funktions-Lösung von w‘‘-xw=0.Ai(x)=Ai(0)f(z)+Ai'(0)g(z)(f und g sind die Taylorreihen-Entwicklungs-Lösungen von w''-xw=0).
# Airy_Bi
5 Gibt den Wert von Bi zurück. Bi ist die Airy-Funktions-Lösung von w‘‘-xw=0. Bi(x)=sqrt(3)(Bi(0)f(z)-Bi'(0)g(z))(f und g sind die Taylorreihen-Entwicklungs-Lösungen von w''-xw=0).
# cycleinv
5 Gibt den inversen Zykel vom Zykel zurück. 
# groupermu
5 Gibt die Gruppe der Permutationen, generiert von a und b zuück.
# perminv
5 Gibt die inverse Permutation der Permutation a zurück.
# permu2mat
5 Gibt die Matrix zurück, bei der die die Zeilen der Einheitsmatrix mit der Permutation p permutiert wurden. 
# permuorder
5 Gibt die Ordnung der Permutation a zurück.
# chisquare
5 Gibt die Wahrscheinlichkeitsdichte der Chi^2-Verteilung bei x0 zurück (n ist die Zahl der Freiheitsgrade). 
# chisquare_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine Chi^2 verteilte Zufallsvariable kleiner als x0 ist (n ist die Zahl der Freiheitsgrade). 
# chisquare_icdf
5 Gibt h so zurück, dass die Wahrscheinlichkeit, dass eine Chi^2 verteilte Zufallsvariable kleiner als h ist, p ist. (n ist die Anzahl der Freiheitsgrade und 0<=p<=1). 
# fisher
5 Gibt die Wahrscheinlichkeitsdichte der F-Verteilung zurück. (n und m sind Anzahlen von Freiheitsgraden). 
# fisher_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine Chi^2 verteilte Zufallsvariable kleiner als x0 ist (n und m sind Anzahlen von Freiheitsgraden). 
# fisher_icdf
5 Gibt h so zurück, dass die Wahrscheinlichkeit, dass eine Chi^2 verteilte Zufallsvariable kleiner als h ist, p ist. (n und m sind Anzahlen von Freiheitsgraden und 0<=p<=1). 
# normald
5 Gibt die Wahrscheinlichkeitsdichte der Normalverteilung zurück (my ist das Mittel und sigma die Standardabweichung). 
# normal_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine Normalverteilte Zufallsvariable kleiner als x0 oder zwischen x0 und y0 ist. (my ist das Mittel und sigma ist die Standardabweichung).
# normal_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit, dass eine normalverteilte Zufallsvariable kleiner als h ist, p ist (my ist das Mittel und sigma die Standardabweichung und 0<=p<=1).
# student
5 Gibt Wahrscheinlichkeitsdichte der Student-Verteilung zurück (n ist die Anzahl der Freiheitsgrade).
# student_cdf
5 Gibt die Wahrscheinlichkeit zurück, dass eine Student-verteilte Zufallsvariable kleiner als x0 ist (n ist der Anzahl der Freiheitsgrade).
# student_icdf
5 Gibt h zurück, sodass die Wahrscheinlichkeit, dass eine Student-verteilte Zufallsvariable kleiner als h ist, p ist (n ist die Anzahl der Freiheitsgrade und 0<=p<=1).
# UTPC
5 Gibt Wahrscheinlichkeitsdichte der Chiquadrat-Verteilung zurück (n ist die Anzahl der Freiheitsgrade).
# UTPF
5 Gibt die Wahrscheinlichkeit zurück, dass eine F-verteilte Zufallsvariable größer als x0 ist (n und d sind Anzahle von Freiheitsgraden).
# UTPN
5 Gibt die Wahrscheinlichkeit zurück, dass eine normalverteile Zufallsvariable größer als x0 ist (my ist das Mittel und v die Varianz).
# UTPT
5 Gibt die Wahrscheinlichkeit zurück, dass eine Student Zufallsvariable größer als x0 ist (n ist die Anzahl der Freiheitsgrade).
# classes
5 Gibt die Matrix [[Klasse, Nummer],..,] zurück, die mit class_min und class_size erhalten wurde. Siehe auch Initialisierung von geo oder Argumente 2 und 3. Alternativ kann die Matrix mit der Liste des Zentrums der Klassen erhalten werden. 
# primpart
5 Gibt das Polynom P dividiert durch den größten gemeinsamen Teiler seine Koeffizienten zurück. 
# content
5 Gibt den größten gemeinsamen Teiler der Koeffizienten des, im Argument übergebenen, Polynoms p zurück. 
# genpoly
5 Gibt das Polynom mit n Variablen Q zurück (-b/2<=coef<=b/2). Dieses wurde rekonstruiert von einem Polynom mit (n-1) Variablen P und einer Basis b (subst(Q,var=b)=P).
# left
5 Gibt den linken Teil einer Gleichung, eines Intervalls, einer Liste oder eines Strings zurück.
# right
5 Gibt den rechten Teil einer Gleichung, eines Intervalls, einer Liste oder eines Strings zurück.
# ord
5 Gibt den ACII-Code eines Zeichens oder des ersten Zeichens eines Strings zurück.
# rotate
5 Gibt die Liste zurück, bei der das letzte Element [oder der Schwanz beginnend mit dem n-ten Element] das erste Element wird (ohne Spezifikation n=-1).
# shift
5 Gibt eine Liste zurück, dessen letztes Element (oder der Schwanz beginnend mit dem n-ten Element) das erste Element wird und dann mit undef aufgefüllt wird (ohne Spezifikation n=-1).
# correlation
5 Gibt Korrelation der Elemente im Argument zurück.
# covariance
5 Gibt die Kovarianz der Elemente des Arguments zurück.
# covariance_correlation
5 Gibt die Liste der Kovarianz und Korrelation der Elemente im Argument zurück.
# exponential_regression
5 Gibt die Koeffizienten (a,b) von y=b*a^x zurück: Das ist die Exponentialfunktion, die die Punkte, die durch die Zeilen von A (oder zwei Listen) gegeben wurden, am besten approximiert.
# exponential_regression_plot
5 Gibt den Plot von y=b*a^x zurück: Das ist die Exponentialfunktion, die die Punkte, die durch die Zeilen von A (oder zwei Listen) gegeben wurden, am besten approximiert.
# histogram
5 Zeichnet das Histogramm von Daten. Optionale Argumente sind eff (Zahl der Daten für jedes Datenelement) oder nc (Anzahl der Klassen) oder classmin (Minimum der Klassen) oder classsize (Größe der Klasse).
# boxwhisker
5 Boxplot für eine statistischen Reihe. 
# mean
# median
5 Median einer Liste. Das zweite Argument ist die Gewichtung. Alternativ kann auch der Median der Spalten einer Matrix berechnet werden. 
# quantile
5 Gibt die Quantile der Elemente aus l, korrespondierend zu p (0<p<1), zurück.
# quartile1
5 Gibt das erste Quartil der Elemente (oder der Spalten) des Arguments zurück.
# quartile3
5 Gibt das dritte Quartil der Elemente (oder der Spalten) des Arguments zurück.
# quartiles
5 Min, erste Quartile, Median, dritte Quartile, max der Elemente (oder der Spalten) des Arguments.
# stddev
5 Gibt die Standardabweichung der Elemente im Argument zurück, die mit dem optionalen zweiten Argument gewichtet werden können. Sonst kann auch die Liste der Standardabweichungen der Spalten einer Matrix berechnet werden. 
# stddevp
5 Gibt eine erwartungstreue Schätzung der Standardabweichung der Population der Stichprobe (erstes Argument). Im optionalen zweiten Argument kann eine Liste von Gewichtungen angegeben werden. 
# sqrfree
5 Faktorisiert das Argument indem die Terme mit demselben Exponenten zusammen gruppiert werden. 
# inv
5 Gibt das Inverse eines Ausdrucks oder einer Matrix zurück. 
# Inverse
5 Gibt das reziproke oder die Matrixinverse zurück, ohne Evaluation.
# rowdim
5 Anzahl der Zeilen einer Matrix. 
# coldim
5 Anzahl der Spalten einer Matrix.
# identity
5 Gibt die Einheitsmatrix der Dimension n zurück.
# BlockDiagonal
5 Gibt entweder die Diagonalmatrix, mit der Diagonalen l zurück oder die Diagonale von A. 
# diag
5 Mit dem ersten Argument gibt man entweder die Diagonalmatrix, mit der Diagonalen l zurück oder die Diagonale von A. Mit dem zweiten Argument gibt man entweder den großen linken Teil von A oder den großen recht Teil von A zurück oder teilt A in drei Teile: strikt links,Diagonale,strikt rechts. Mit dem dritten Argument gibt man die tridiagonale Matrix zurück, mit den Diagonalen l, d, u.
# coeff
5 Gibt die Liste der Koeffizienten eines Polynoms bezüglich des zweiten Arguments zurück oder die Liste der Koeffizienten des Grades, der im dritten Argument gegeben wurde.
# taylor
5 Reihenentwicklung bei endlichen oder unendlichen Punkten (Standard x=0 und die relative Ordnung=5)
# dim
5 Gibt die Liste zurück die die Dimension der Matrix angibt, die im Argument übergeben wurde.
# format
5 Transformiert eine reelle Zahl in einen String, mit dem angegeben Format (f=float, s=wissenschaftlich, e=Ingenieur).
# abs
5 Gibt den Betrag oder die Norm des Argumentes zurück.
# acos
5 Arccosinus
# acosh
5 Arcus Cosinus hyperbolikus
# acot
5 Arcus Kotangenz 
# acsc
5 Arccosecant: acsc(x)=asin(1/x).
# adjoint_matrix
5 Gibt das charakteristische Polynom von A und die Streichungsmatrizen von A-xI.
# affix
5 Komplexe Zahl gleich dem Repräsentant in der komplexen Zahlenebene (Punkt oder Vektor).
# algvar
5 Liste der Variablen angegeben in aufsteigender Reihenfolge bezüglich der algebraischen Entwicklung.
# angle
5 angle(A,B,C) ist der Wert des Maßes des Winkels (AB,AC).
# angleat
5 angleat(A,B,C,z0) zeigt am Punkt(z0) mit einer Legende den Wert des Maßes des Winkel (AB,AC) an.
# angleatraw
5 angleat(A,B,C,z0) zeigt am Punkt(z0) den Wert des Maßes des Winkel (AB,AC) an.5 angleat(A,B,C,z0) zeigt am Punkt(z0) mit einer Legende den Wert des Maßes des Winkel (AB,AC) an.
# distanceat
5 distanceat(A,B,z0) zeigt am Punkt(z0) mit einer Legende den Abstand zwischen 2 geometrischen Objekten an.
# distanceatraw
5 distanceat(A,B,z0) zeigt am Punkt(z0) den Abstand zwischen 2 geometrischen Objekten an.
# slope
5 Gibt die Steigung einer Geraden zurück, die im Argument definiert wurde oder kann als Attribut von droite verwendet werden.
# slopeat
5 slopeat(d,z0) zeigt am Punkt(z0) mit einer Legende den Wert der Steigung der Geraden oder des Segments d an.
# slopeatraw
5 slopeat(d,z0) zeigt am Punkt(z0)  den Wert der Steigung der Geraden oder des Segments d an.
# area
5 Algebraische Fläche eines Kreises oder eines Sterns (Polygon) (zum Beispiel Dreieck, Quadrat,…) oder die Fläche unter einer Kurve, optional mit Angabe der Methode (trapezoid (=Trapez),left_rectangle (=linksbündige Rechtecke),right_rectangle(=rechtsbündige Rechtecke),middle_point (=nutzt den Mittelpunkt),simpson,rombergt,rombergm).
# areaat
5 Zeigt am Punkt (z0) mit einer Legende den algebraischen Inhalt eines Kreises oder eines Sterns (Polygon)(zum Beispiel Dreieck, Quadrat,…) an.
# areaatraw
5 5 Zeigt am Punkt (z0) den algebraischen Inhalt eines Kreises oder eines Sterns (Polygons)(zum Beispiel Dreieck, Quadrat,…) an.
# perimeter
5 Umfang eines Polygons (z.B. Dreieck, Quadrat,..)
# perimeterat
5 Zeigt am Punkt (z0) mit einer Legende den Umfang eines Kreises oder eines Polygons (z.B. Dreieck, Quadrat,..) an.
# perimeteratraw
5 Zeigt am Punkt (z0) den Umfang eines Kreises oder eines Polygons (z.B. Dreieck, Quadrat,..) an.
# extract_measure
5 extract_measure gibt den Wert, der im Argument berechnet wird, als Antwort.
# append
5 Fügt ein Element an eine Liste an.
# arg
5 Argumentfunktion einer komplexen Zahl.
# args
5 In einem Programm ist args(NULL) die Liste der Funktion und seiner Argumente.
# asin
5 Arcsin.
# asc
5 Gibt die Liste der ASCII Codes eines Strings an.
# asec
5 Arcsecant: asec(x)=acos(1/x).
# asinh
5 Arcus-Sinus hyperbolikus
# assume
5 Macht eine Annahme über eine Variable.
# additionally
5 Macht eine zusätzliche Annahme über eine Variable.
# at
5 at(l,j) (oder at(m,[j,k])) ist das Element einer Liste l (oder Matrix m) für Index=j (oder Index j,k).
# atan
5 Arkustangenz 
# atan2acos
5 Ersetzt arctan(x) durch pi/2-arccos(x/sqrt(1+x^2)) im Argument. 
# atan2asin
5 Ersetzt arctan(x) durch arcsin(x/sqrt(1+x^2)) im Argument.
# atanh
5 Arkus-Tangens hyperbolikus.
# a2q
5 a2q(A,X)=die quadratische Form q assoziiert mit A, X=Vektor aus Variablen. 
# backquote
5 ``
# basis
5 Extrahiert eine Basis aus einer Menge von Vektoren, die einen Raum aufspannen.
# bisector
5 Zeichnet die Winkelhalbierende des Winkels (AB,AC) gegeben durch 3 Punkte A,B,C. 
# exbisector
5 Zeichnet die äußere Winkelhalbierende des Winkels (AB,AC) gegeben durch die Punkte A,B,C.
# bloc
5 Reserviertes Wort.
# begin
5 Beginnt bloc.
# bernoulli
5 bernoulli(n) ist die n-te Bernoulli-Zahl und bernoulli(n,x) ist das n-te Bernoulli-Polynom und das zweite Argument ist die Variable.
# break
5 Unterbricht eine Schleife: while (Bedingung) {Instruktion1; if (Bedingung) {Instruktion2;break;}}.
# breakpoint
5 Fügt einen breakpoint hinzu (einen Punkt zum Stoppen).
# canonical_form
5 kanonische Form eines Polynoms zweiten Grades.
# case
5 Test (multiple choice (=Wahl aus mehreren Möglichkeiten)): switch(Variable){Fall 1: {bloc1;} Standard: {bloc2;}};
# catch
5 Schutz vor einem Error (=Fehler):try {Instruktion} catch (Variable) {Instruktion für den Fall eines Fehlers}(in einem Programm). 
# cd
5 Wechselt Richtung
# ceil
5 Gibt die kleinste ganze Zahl >= das Argument zurück.
# center
5 Zeigt den Mittelpunk eines Kreises.
# orthocenter
5 Zeigt den Höhenschnittpunkt (Orthozentrum) eines Dreiecks oder eines Dreiecks, gemacht mit 3 Punkten.
# changebase
5 Gibt die Matrix B=inv(P)*A*P zurück.
# char
5 Gibt den String zurück, der den Zeichen-Code des Arguments hat.
# continue
5 In einem Programm. Führt nicht das Ende der Iteration aus, sondern die nächste:while (Bedingung) {i1; if(Bedingung) continue; i2;}.
# cont
5 Führt die Ausführung eines gestoppten Programms fort.
# chinrem
5 Chinesischer Rest eines Polynoms, dass als Liste oder in symbolischer Form übergeben werden kann.
# conic
5 Definiert einen Kegelschnitt durch seine Gleichung mit x,y als Standardvariablen und zeichnet ihn.
# quadric
5 Definiert eine Quadrik durch seine kartesische Gleichung mit x,y,z als Standardvariablen und zeichnet sie.
# circle
5 Definiert für 2-D einen Kreis mit Durchmesser (arg2=Punkt) oder durch Zentrum und Radius (arg2=Komplex, abs(arg2)=Radius) [oder den Bogen AB, A Winkel a, B Winkel b (arg1+arg2=Winkel 0)] oder durch seine Gleichung. In 3-D mit Durchmesser und einem dritten Punkt. 
# cholesky
5 Für eine numerische symmetrische Matrix A, wird die Matrix L zurückgegeben, sodass A=L*tran(L).
# circumcircle
5 circumcircle(A,B,C)=Umkreis des Dreiecks ABC.
# click
5 Interaktive Eingabe einer komplexen Zahl mit einem Klick auf einem geometrischen Bildschirm.
# comb
5 comb(n,r)= Zahl der Kombinationen von r Objekten, die aus n genommen wurden: n!/(r!(n-r)!) (Wenn n<0 comb(n,r)=n(n-1)..(n-r+1)/r!).
# comment
5 Kommentar in einem Programm.
# concat
5 Verknüpft zwei Listen oder zwei Strings oder zwei Folgen oder zwei Matrizen (die 2 Matrizen müssen dieselbe Anzahl an Zeilen haben und werden Linie für Linie verknüpft).
# conj
5 Gibt die Konjugierte einer komplexen Zahl zurück.
# inString
5 Testet, ob e im String l ist (Gibt -1 zurück oder k, wenn l[k]=e).
# member
5 Testet ob e in der Liste oder in der Menge l ist (=0 oder k+1 mit l[k]=e).
# contains
5 Tester, ob eine Menge einen Ausdruck enthält (gibt den Index+1 oder 0 zurück.)
# cos
5 Cosinus oder Option des convert bzw. convertir Befehls (identisch trigcos).
# cosh
5 Cosinus Hyperbolikus.
# cot
5 Kotangens 
# cross
5 Dachprodukt
# csc
5 Cosecant: csc(x)=1/sin(x).
# curl
5 Rotation (Differentialoperator) ([A,B,C],[x,y,z])=[dC/dy-dB/dz,dA/dz-dC/dx,dB/dx-dA/dy].
# curve
5 Reserviertes Wort.
# cycle2perm
5 Wandelt den Zykel c in eine Permutation um.
# cycles2permu
5 Wandelt ein Produkt aus Zykeln in eine Permutation um.
# cyclotomic
5 N-tes Kreisteilungspolynome.
# c1oc2
5 Gibt die Permutation zurück, die aus dem Produkt der zwei Zykel gebildet wurde. 
# c1op2
5 Gibt die Permutation zurück, die aus dem Produkt von Permutation und Zykel gebildet wurde.
# debug
5 Startet die Debugging-Session.
# default
5 Standard-Fall der Instruktion der switch Funktion.
# degree
5 Grad des Polynoms P bezüglich des zweiten Arguments.
# desolve
5 Löst eine Differentialgleichung oder ein System linearer Differentialgleichungen mit konstanten Koeffizienten. 
# det
5 Determinante eine quadratischen Matrix M.
# Det
5 Determinante einer quadratischen Matrix M, ohne Auswertung. 
# divergence
5 Divergenz (Differentialoperator) ([A,B,C],[x,y,z])=dA/dx+dB/dy+dC/dz.
# divpc
5 Taylor-Polynom vom Grad n für den Quotienten von 2 Polynomen. 
# dot
5 Skalarprodukt.
# *
5 Skalarprodukt infix-Variante (oder Produkt von 2 Ausdrücken oder 2 Matrizen). 
# diff
5 Gibt die Ableitung bzgl. des zweiten Arguments zurück.
# '
5 Gibt die Ableitung bzgl. des zweiten Arguments zurück. (postfix-Version von diff).
# symb2poly
5 Gibt die Koeffizienten eines Polynoms bezüglich des zweiten Arguments zurück oder, wenn das zweite Argument eine Liste ist, die interne Form des Polynoms. 
# poly2symb
5 Gibt das Polynom (oder seinen Wert): Das erste Argument ist ein Vektor aus Koeffizienten und das zweite Argument ist die Variable (Standardmäßig x).
# egcd
5 Erweitertet größter gemeinsamer Teiler von 2 Polynomen.
# egv
5 Berechnet die Eigenvektoren einer diagonalisierbaren Matrix.
# egvl
5 Gibt die Jordannormalform von A zurück, wenn die Eigenwerte berechenbar sind.
# eigenvals
5 Gibt die Folge der (berechenbaren) Eigenwerte einer Matrix zurück.
# else
5 Steht vor der Instruktion, die ausgeführt werden soll, wenn in einer „if“-Struktur die Bedingung nicht erfüllt wird:if (condition){instruction1;} else {instruction2;}
# elif
5 Kurze Schreibweise von else if, die verwendet wird, falls es mehrere if...else if… und so weiter gibt: if Bedingung1 then Instruktion1; elif Bedingung2 then Instruktion2;...[else Instruktion;] end
# element
5 Zeigt einen Punkt, der auf einer Kurve gewählt wurde oder eine reelle Zahl, die in einem Intervall gewählt wurde.
# ellipse
5 ellipse(F1,F2,M)=Ellipse mit Brennpunkten F1,F2 durch M oder so das MF1+MF2=2*a (geo2d). ellipse(p(x,y)) zeichnet den Kegelschnitt wenn deg(p)=2. 
# epsilon2zero
5 Werte < epsilon werden durch 0 ersetzt. 
# =
5 Infix-Symbol, dass 2 Teile einer Gleichung verbindet. 
# equal
5 Präfix-Version von =
# equal2diff
5 A=B oder equal(A,B) wird in die Differenz A-B umgewandelt.
# equal2list
5 A=B oder equal(A,B) wird in die Liste [A,B] umgewandelt.
# equation
5 equation gibt die kartesische Gleichung einer Kurve an. 
# erase
5 Löscht den Grafik-Bildschirm.
# error
5 Ermöglicht das Anzeigen eines Fehlers im Programm. 
# is_collinear
5 Gibt 1 zurück, wenn die Punkte in einer Linie sind, 2 wenn die Punkte dieselbe sind. Sonst wird 0 zurückgegeben.
# is_concyclic
5 Gibt 1 zurück, wenn die Punkte einen Kreis bilden. Sonst wird 0 zurückgegeben.
# is_cycle
5 Gibt 1 zurück, wenn das Argument ein Zykel ist. Sonst wird 0 zurückgegeben.
# is_parallel
5 Gibt 1 zurück, wenn 2 Linien Parallel sind. Sonst wird 0 zurückgegeben.
# is_permu
5 Gibt 1 zurück, wenn das Argument eine Permutation ist. Sonst wird 0 zurückgegeben.
# is_perpendicular
5 Gibt 1 zurück, wenn 2 Geraden senkrecht zueinander sind.
# euler
# euler_gamma
5 Eulers Konstante=euler_gamma=limit(sum(1/k,k,1,n)-ln(n),n,+infinity).
# eval
5 Evaluiert das Argument.
# evalf
5 Numerische Auswertung des ersten Arguments (wir können im zweiten Argument die Zahl der Nachkommastellen angeben).
# evalb
5 Boolesche Auswertung des Arguments.
# exp
5 Exponentialfunktion oder Option des Befehls convert/convertir (identisch trig2exp).
# factor
5 Faktorisiert ein Polynom.
# Factor
5 Faktorisiert ein Polynom ohne Auswertung.
# factor_xn
5 Faktorisiert x^n in P(n=Grad des Polynoms P).
# factorial
5 factorial(n)=n! . Für nicht ganzzahlige Argumente factorial(a)=G(a+1) G ist die Eulersche Gamma-Funktion
# fcoeff
5 Gibt das Polynom zurück, das durch die Liste (Nullstellen oder Pole, Multiplizität) beschrieben wird.
# expand
5 Ausmultipliziert vollständig.
# for
5 Schleife:  for (Initialisierung;do_if_true;Hochzählen) {Aktion;}
# feuille
5 Gibt die Argumente eines Operators als Folge zurück.
# float2rational
5 Wandelt den Ausdruck in einen rationalen oder reellen Ausdruck um.
# floor
5 Gibt die größte ganze Zahl <= dem Argument zurück.
# froot
5 Gibt die Liste der Nullstellen und Pole von F mit ihrer Multiplizität zurück.
# fsolve
5 Numerische Lösung einer Gleichung oder eines Systems von Gleichungen.
# cfsolve
5 Numerische Lösung in den komplexen Zahlen einer Gleichung oder eines Gleichungssystems. 
# nSolve
5 Numerische Lösung einer Gleichung oder eines Systems von Gleichungen.
# Gamma
5 Berechnet den Wert von der Eulerschen Gamma-Funktion am Punkt a (Gamma(n+1)=n! wenn n ganzzahlig) wenn a>0, Gamma(a)=int(e^{-t}*t^{a-1},t=0..inf)) und Gamma(a)=Gamma(a+1)/a und Gamma(a,b)=ugamma(a,b).
# ugamma
5 Berechnet den Wert der uGamma-Funktion am Punkt (a,x): Wenn a und x>=0 ugamma(a,x)=int(e^{-t}*t^{a-1},t=x..inf),(ugamma(a,x)+igamma(a,x)=Gamma(a)).
# igamma
5 Berechnet den Wert der unvollständigen Gamma Funktion am Punkt (a,x). Wenn a und x>0 igamma(a,x)=int(e^{-t}*t^{a-1},t=0..x)(igamma(a,x,1)=igamma(a,x)/Gamma(a))
# gauss
5 Spaltet eine quadratische Form in Summen und Differenzen von Quadraten auf.
# Gcd
5 Gibt den größten gemeinsamen Teiler von 2 Polynomen oder 2 ganzer Zahlen ohne Auswertung an.
# gcd
5 Gibt den größten gemeinsamen Teiler von 2 Polynomen mit vielen Variablen zurück oder von 2 ganzen Zahlen oder von 2 rationalen Zahlen.
# gramschmidt
5 Gibt eine orthonormale Basis von E mit der Basis B für das Skalarprodukt Sp zurück. 
# graph2tex
5 Wandelt den Grafikbildschirm in eine LaTeX-Datei um.
# graph3d2tex
5 Wandelt den 3D Grafik-Bildschirm in eine LaTeX-Datei um.
# hadamard
5 Obere Schranke nach der Hadamard-Ungleichung einer Matrix oder elementweise Multiplikation von 2 Matrizen. 
# halftan_hyp2exp
5 Wandelt die trigonometrische Funktion in tan(x/2) und hyperbolische Funktionen in Exponentialfunktionen um.
# halt
5 Schaltet ein Programm in einen Schritt-für-Schritt debug-Modus um.
# has
5 Testet ob die Variable im Ausdruck vorkommt.
# altitude
5 altitude(A,B,C) zeichnet die Höhe durch A des Dreiecks ABC.
# barycenter
5 barycenter([Punkt1,Koeffizient1],…) zeichnet das Baryzentrum von Punkt1 mit Gewicht Koeffizient1.
# isobarycenter
5 isobarycenter(A,B,C,…) zeichnet das Iso-Baryzentrum (Baryzentrum bei dem jeder Punkt gleich gewichtet wird) der n Punkte A,B,C,...
# median_line
5 median_line(A,B,C) zeichnet die Seitenhalbierende durch A des Dreiecks ABC.
# perpen_bisector
5 perpen_bisector(A,B) zeichnet die Bisektion (Gerade oder Ebene) des Abschnitts AB. 
# midpoint
5 midpoint(A,B) zeichnet den Mittelpunk des Abschnitts AB.
# head
5 Zeigt das erste Element eines Vektors, einer Folge oder eines Strings.
# hermite
5 Gibt das Hermite-Polynom von Grad n zurück oder die hermitesche Normalform für die Koeffizientenmatrix einer Matrix. (I,U sodass I*A=U).
# smith
5 Gibt die Smith-Normalform der Koeffizientenmatrix eines Polynoms zurück (U,D,V sodass U*A*V=D).
# grad
5 Gibt den Gradient des Ausdrucks Xpr zurück.
# hessian
5 Gibt die Hesse-Matrix des Ausdrucks Xpr zurück.
# hilbert
5 Gibt die Hilbert-Matrix der Ordnung n zurück: Hjk=1/(j+k+1) j,k=1..n
# homothety
5 homothety(C,k,A)=Punkt A1 sodass vect(C,A1)=k*vect(C,A) in 2D ist es also das Ähnlichkeitszentrum C, abs(k) ist das Verhältnis und arg(k) ist der Winkel.
# inversion
5 inversion(C,k,A)=Punkt A1 sodass A1 auf der Linie line(C,A) ist und mes_alg(CA1*CA)=k.
# hyp2exp
5 Transformiert hyperbolische Funktionen in Exponentialfunktionen.
# hyperbola
5 hyperbola(F1,F2,M)=Hyperbel mit Brennpunkt F1,F2 durch M oder (|MF1-MF2|=2*a geo2d). hyperbola(p(x,y)) zeichnet den Kegelschnitt, wenn deg(p)=2.
# i
5 Wurzel aus -1
# e
5 exp(1)
# pi
5 Die Zahl Pi
# ibasis
5 Basis der Schnittmenge aus zwei Vektorräumen. 
# infinity
5 Unendlich
# +infinity
5 Plus unendlich
# -infinity
5 Minus unendlich
# ibpdv
5 Partielle Integration von f(x)=u(x)*v‘(x) mit f(x) als erstem Argument und v(x) (oder 0 um direkt zu integrieren) als zweites Argument. Die Integrationsvariable kann spezifiziert werden, genauso wie die Berechnung des Integrals (Grenzen a und b).
# ibpu
5 Partielle Integration von f(x)=u(x)*v‘(x) mit f(x) als erstem Argument und v(x) (oder 0 um direkt zu integrieren) als zweites Argument. Die Integrationsvariable kann spezifiziert werden, genauso wie die Berechnung des Integrals (Grenzen a und b).
# ichinrem
5 Chinesischer Rest (Ganzzahlen)
# if
5 Test: if(Bedingung) true_action; else false_action; (=wahr_Handlung; sonst falsch_Handlung;)
# ifactor
5 Faktorisierung einer ganzen Zahl im Primfaktoren
# ilaplace
5 Inverse Laplace-Transformation einer rationalen Funktion.
# im
5 Gibt den Imaginärteil einer komplexen Zahl zurück.
# image
5 Bild der linearen Abbildung mit Matrix M.
# in
5 Iteration for...end_for in einer Menge oder einer Liste oder einem Wertebereich.
# incircle
5 incircle(A,B,C) zeichnet den Innenkreis des Dreiecks ABC.
# excircle
5 excircle(A,B,C) zeichnet den Ankreis (A-excircle) an das Dreieck ABC relativ zum Punkt A. 
# int
5 Indefinites Integral, Integrationsvariable ist im zweiten Argument. Integral kann auch berechnet werden (Grenzen a und b müssen übergeben werden.
# inter
5 Mit zwei Argument (respektive 3 Argumenten). Gibt die Schnittmenge zweier Kurven oder Oberflächen in der Form eines Vektors (respektive in Form eines Punktes, nah am Punkt im dritten Argument) zurückgegeben.
# single_inter
5 Gibt einer der Schnittpunkte zweier Kurven oder Oberflächen an (oder die Schnittmenge nah an A, nicht in L).
# iquo
5 Euklidischer Quotient aus 2 Ganzzahlen. 
# div
5 Euklidischer Quotient aus zwei Ganzzahlen (infix-Variante)
# iquorem
5 Euklidischer Quotient und Rest zweier Ganzzahlen. 
# irem
5 Euklidische Rest zweier Ganzzahlen.
# is_pseudoprime
5 Pseudoprimzahl-Test (0 keine Primzahl, 1 wahrscheinlich Primzahl, 2Primzahl).
# is_prime
5 Gemischter Test: „p-1“ von Pocklington [1] oder APRCL [2] (gibt die Koeffizienten eines Beweises der Primzahleigenschaft zurück, 1 oder 0).
# isprime
5 Testet Primzahleigenschaft. (=true oder false   = wahr oder falsch).
# isom
5 Findet Elemente einer 2-d oder 3-d Isometrie. 
# lgcd
5 Gibt den größten gemeinsamen Teiler einer Liste von Polynomen oder ganzen Zahlen zurück.
# jacobi_symbol
5 Jacobi-Symbol
# jordan
5 Gibt die Liste zurück, die die Basiswechselmatrix und die Jordannormalform einer Matrix zurück.
# rat_jordan
5 Gibt die Liste zurück, die die Basiswechselmatrix und die rationale Jordannormalform einer Matrix zurück.
# ker
5 Kern der linearen Abbildung der Matrix M.
# Nullspace
5 „Inert Form“ von nullspace für modulare Berechnung (irem/mod)
# Resultant
5 „Inert Form“ von resultant für modulare Berechnung (irem/mod). 
# kill
5 Stoppt die Schritt-für-Schritt Ausführung eines Programms (mit Debug). 
# lagrange
5 Gibt das Polynom vom Grad n-1 zurück sodass P(xk)=yk=f(x_k) k=0..n-1 oder die Liste der dividierten Differenzen, wenn das letzte Argument lagrange ist.
# laguerre
5 Gibt das n-te Laguerre Polynom zurück.
# laplace
5 Laplace-Transformation
# laplacian
5 Gibt den Laplace-Operator angewendet auf einen Ausdruck Xpr zurück. Der Laplace-Operator bezüglich der Liste von Variablen. Laplacian (n) für n ganzzahlig oder einen ganzzahligen Float gibt die Matrix des diskreten Laplace-Operators in einer Dimension der Größe n zurück. 
# lcm
5 Gibt das kleinste gemeinsame Vielfache von 2 Polynomen mit mehreren Variablen oder 2 ganzen Zahlen oder 2 rationalen Zahlen zurück. 
# legendre
5 Gibt das n-te Legendrepolynom zurück.
# locus
5 locus(M,A) zeichnet den geometrischen Ort von M ( oder locus(d,A) zeichnet die Einhüllende von d), wenn A:=element(C) (C ist eine Kurve). Die Beispiele unten müssen auf einem geometrischen Niveau in verschiedene Zeilen geschrieben werden.
# lin
# linsolve
5 Löst lineare Gleichungssysteme.
# thickness
5 Option (kompatibel mit Maple) eines Grafik-Befehls, um Liniendicke zu definieren. 
# axes
5 Globale Option (kompatibel mit Maple) der Grafik-Befehle, um die Achsen zu setzen oder nicht.
# style
5 Lokale Option (kompatibel mit Maple) eines Grafik-Befehls um eine gepunktete Linie zu zeichnen mit style=point.
# title
5 Globale Option eines Grafik-Befehls, um einen Titel in die Grafik einzufügen.
# gl_texture
5 Option die ein Bild in einem Rechteck mit Seiten Parallel zu den Achsen (2d) einfügt. Es kann auch auf einer 3-D Oberfläche eingefügt werden oder den Hintergrund auffüllen (2-d).
# gl_shownames
5 Option die Objektnamen anzeigt oder versteckt.
# gl_quaternion
5 Option, die die Quaternionen für eine Visualisieren in 3-D Szenen definiert (nicht in interaktiven Szenen verwenden!)
# gl_rotation
5 Globale Option, die erlaubt eine Rotationsachse für die Animation von 3-D Szenen zu definieren.
# gl_ortho
5 Option, die erlaubt eine orthonormale Grafik-Konfiguration zu definieren. 
# gl_x
5 Globale Option, die es erlaubt die Grafik-Konfiguration zu definieren.
# gl_xtick
5 Globale Option, die das Intervall zwischen Strichen auf der x- (bzw. y,z-) Achse definiert.
# gl_x_axis_unit
5 Globale Option, die erlaubt individuell die Einheiten der x, (y,z) Achse zu definieren.
# gl_x_axis_color
5 Globale Option, die erlaubt individuell die Farbe der x, (y,z) Achse zu definieren.
# gl_x_axis_name
5 Globale Option, die erlaubt individuell die Namen der x, (y,z) Achse zu definieren.
# legend
5 legend(za,"hier") (oder legend([20,60],"hier")) "hier" wird an den Punkt des Affixes za geschrieben (oder an die Pixelposition [20,60]). legend=["m","s"] schreibt "m","s" als Einheiten der Achsen.
# labels
5 labels=["u","v"] benennt die Achsen mit "u" und "v" neu.
# legendre_symbol
5 Legendre Symbol.
# ln
5 Natürlicher Logarithmus oder Option des convert bzw. convertir Befehls (id trig2exp).
# expln
5 Option des convert oder convertir Befehls (id trig2exp).
# local
5 Lokale Definition einer Variable: f(x):={local (var1:=x),var2; instruction;};
# logb
5 Logarithmus mit Basis b.
# log10
5 Logarithmus mit Basis 10
# alog10
5 Funktion x->10^x
# distance
5 Berechnet den Abstand zwischen zwei Punkten oder den zwischen einem Punkt und einer Kurve.
# distance2
5 Berechnet das Quadrat des Abstands zwischen zwei Punkten oder den zwischen einem Punkt und einer Kurve.
# limit
5 Limes eines Ausdrucks an einem Punkt (a oder +/- unendlich) (d=-1 für lim inf und +1 für lim sup).
# lu
5 Für eine numerische Matrix A werden die Matrizen P Permutation, L und U zurückgegeben sodass PA=LU (P=permu2mat(p)).
# lvar
5 Liste der Variablen eines Objektes (mit rationaler Abhängigkeit). 
# lname
5 Liste der Variablen in einem Ausdruck.
# norm
5 Gibt die l2-Norm eines Vektors zurück = sqrt(x1^2+x2^2+...xn^2) oder die Matrix-Norm, die durch die l2 Norm induziert wird.
# maxnorm
5 Maximumsnorm eines Vektors oder einer Matrix: maxnorm([x1,x2,..,xn])=max(|x1|,..,|xn|).
# rowNorm
5 Gibt das Maximum der l1_Norm der Zeilen einer Matrix zurück:rowNorm(a_{j,k})=max_j(sum_k(|a_{j,k}|)).
# colNorm
5 Gibt das Maximum der l1_Norm der Spalten einer Matrix zurück:rowNorm(a_{j,k})=max_j(sum_k(|a_{j,k}|)).
# max
5 Maximum der Elemente einer Liste oder Folge von reellen Zahlen.
# makelist
5 Gibt eine Liste, erstellt durch eine Funktion oder eine Konstante, zurück.
# map
5 Wendet die Funktion f auf die Elemente der Liste l oder ein Polynom im internen Format an.
# apply
5 Wendet die Funtkion f auf die Elemente einer Liste l an (Option matrix für eine Matrix).
# maple_mode
5 Wechselt zum Modus Xcas (0), Maple (1), Mupad (2), TI89 (3).
# maple2mupad
5 maple2mupad("file1","file2") übersetzt file1(Maple) nach file2(MuPAD).
# maple2xcas
5 maple2mupad("file1","file2") übersetzt file1(Maple) nach file2(Xcas).
# mupad2maple
5 maple2mupad("file1","file2") übersetzt file1(Mupad) nach file2(Maple).
# mupad2xcas
# min
5 Minimum der Elemente einer Folge oder einer Liste von reellen Zahlen.
# mkisom
5 Matrix einer Isometrie gegeben durch seine Eigenelemente (Eigenvektoren und Eigenwerte)
# minus
5 Infix-Operator, der benutzt wird, um die Differenz zwischen zwei Mengen zu erhalten.
# moyal
5 Moyal-Produkt zweier Symbole.
# newton
5 newton(f(x),x,a,p)= eine Nullstelle von f(x) mit dem Newton-Verfahren beginnend mit a und p Iterationen (standardmäßig p=20).
# nextprime
5 Nächste Primzahl oder Pseudo-Primzahl nach einer gegeben ganzen Zahl.
# normal
5 Vereinfacht den Ausdruck
# not
5 Gibt die logische Inverse des Arguments zurück.
# !
5 Gibt das logische Inverse zurück, wenn als Präfix gebraucht und Fakultät, wenn als Infix gebraucht. 
# nop
5 Befehl nichts zu tun. 
# odesolve
5 odesolve(f(t,y),[t,y],[t0,y0],t1)=odesolve(t0..t1,f,y0)=y(t1) für y approximiert die Lösung von y'=f(t,y) und y(t0)=y0 mit y=Vektor des Systems.
# of
5 Gibt den Wert: f(a) zurück.
# option
5 Reserviertes Wort für Kompatibilität.
# order_size
5 Rest (Term im Landau-Symbol) einer Reihenentwicklung limit(x^a*order_size(x),x=0)=0, wenn a>0. 
# parabola
5 parabola(F,A)=Brennpunkt F, Scheitelpunkt A (in der Ebene ABP) oder (parabola(A,c) für die Gleichung y=yA+c*(x-xA)^2 c=1/(2*p) und FA=p/2 geo2d) und parabola(P(x,y)) zeichnet den Kegelschnitt, wenn deg(P)=2. 
# parallel
5 parallel(A,D) (bzw. parallel(A,P) oder parallel(A,D,DD)) zeichnet die Gerade (bzw Ebene) durch a parallel zur Gerade D (bzw parallel zur Ebene P oder den Geraden D,DD). parallel(d,D) zeichnet die Ebene durch d parallel zur Gerade D.
# parameter
5 Reserviertes Wort.
# plotparam
5 plotparam(a(x)+i*b(x),x=x0..x1) zeichnet die Kurve X=a(x), Y=b(x) x=x0..x1 oder plotparam([a(u,v),b(u,v),c(u,v)],[u=u0..u1,v=v0..v1]) zeichnet die Oberfläche X=a(u,v),Y=b(u,v),Z=c(u,v) u=u0..u1 und v=v0..v1.
# parameq
5 parameq(C) gibt die komplexe Zahl= Parametergleichung der Kurve C zurück.
# partfrac
5 Führt Partialbruchzerlegung eines Bruches durch. Kann als Option des convert bzw convertir Befehls genutzt werden (id bei der Option parfrac).
# cpartfrac
5 Führt Partialbruchzerlegung eines Bruches in C durch.
# pcar
5 Liste der Koeffizienten des charakteristischen Polynoms einer Matrix oder des charakteristischen Polynoms einer Matrix mit dem Argument als zweiter Variable.
# pcar_hessenberg
5 Charakteristisches Polynom einer Matrix mit dem Hessenberg-Verfahren (wenn die Koeffizienten in einem endlichen Körper sind.
# perm
5 perm(n,p)= Anzahl der Anordnungen von p Objekten aus n : n!/(n-p)!
# perpendicular
5 perpendicular(A,line(B,C)) oder perpendicular(A,B,C) zeichnet das Lot von A auf Gerade BC und perpendicular(d,plane(B,C,D)) zeichnet die orthogonale Ebene von der Ebene (B,C,D) durch die Gerade d.
# orthogonal
5 orthogonal(A,line(B,C)) zeichnet die orthogonale Ebene von BC durch den Punkt A und orthogonal(A,plane(B,C,D)) zeichnet die Orthogonale Linie von plan(B,C,D) durch A.
# proot
5 Gibt alle berechneten Nullstellen eines Polynoms, dass durch seine Koeffizienten gegeben wurde, zurück (funktioniert nicht, wenn Nullstellen nicht einfach sind).
# pcoeff
5 Gibt die Koeffizienten des Polynoms zurück, dessen Nullstellen im Argument spezifiziert wurden. 
# peval
5 Wertet ein Polynom, dass durch seine Koeffizienten gegeben wurde am Punkt x0 aus.
# plot
5 Plottet einen Ausdruck mit einer Variablen (oder einer Liste von Ausdrücken). 
# plotfunc
5 Plottet einen Ausdruck mit einer oder zwei Variablen mit Superposition.
# plotimplicit
5 plotimplicit(f(x,y),x,y) oder plotimplicit(f(x,y),[x,y]) Graph von f(x,y)=0.
# fieldplot
5 fieldplot(f(t,y),[t,y]) zeichnet das Feld der Tangenten (normalisiert oder nicht kann mit der Option entschieden werden) der Differentialgleichung y'=f(t,y).
# interactive_plotode
5 Zeichnet (in DispG) eine Lösung für jeden Punkt t0+i*y0, der durch Mausklick ausgewählt wurde (Esc=Stopp).
# odeplot
5 odeplot(f(t,y),[t,y],[t0,y0]) zeichnet die Lösung von y'=f(t,y) und y(t0)=y0 oder des Systems [x'=g(t,x,y),y'=h(t,x,y)] mit x(t0)=x0 und y(t0)=y0.
# pmin
5 Gibt das Minimal Polynom der Matrix A oder das Minimalpolynom der algebraischen Zahl zurück.
# plotpolar
5 plotpolar(f(x),x,a,b) zeichnet die Polarkurve r=f(x) für x in [a,b].
# pixon
5 Pixel an
# pixoff
5 Pixel off
# potential
5 Gibt U zurück sodass gradient(U)=derive(U,Vector_of_variable)=V.
# powmod
5 Berechnet a^n modulo p, modulo p,P(x) (schneller Algorithmus).
# pow
5 Berechnet a^n(schneller Algorithmus)
# preval
5 Gibt F(b)-F(a) zurück.
# prevprime
5 Vorherige Primzahl oder Pseudo-Primzahl vor einer gegebenen ganzen Zahl a. 
# prepend
5 Setzt das Element an den Anfang einer Liste.
# print
5 Zeigt an(Print) ein Ergebnis in einem Programm
# projection
5 projection(C,A) ist die orthogonale Projektion von A auf der Kurve C. 
# program
5 reserviertes Wort.
# proc
5 Beginnt eine Prozedur (wie mit MuPAD).
# Psi
5 Psi(a,n)=n-th Ableitung der Funktion DiGamma (=ln@Gamma) am Punkt A (Psi(a,0)=Psi(a)).
# ptayl
5 Gibt das Taylor-Polynom des Ausdrucks an einem gegebenen Punkt und Ordnung oder das Polynom Q sodass P(x)=Q(x-a).
# purge
5 purge(varname) Stellt die Variable mit Namen varname frei.
# pwd
5 Aktuelle Richtung der Arbeit.
# p1oc2
5 Gibt das Produkt der Permutationen von p1 und c2 zurück. 
# p1op2
5 Gibt die Permutation Produkt aus p1 und p2 zurück.
# qr
5 Für eine numerische Matrix A, wird R(right (rechts)) und Q(orthogonal) zurückgegeben, sodass A=QR.
# quote
5 Gibt das Argument nicht ausgewertet zurück (und auch a:=quote(a) was a freistellt).
# quo
5 Euklidischer Quotient von 2 Polynomen.
# Quo
5 Gibt den euklidischen Quotient von 2 Polynomen ohne Auswertung zurück.
# quorem
5 Euklidischer Quotient und Rest von 2 Polynomen.
# q2a
5 q2a(q(x,y),[x,y])=symmetrische Matrix assoziiert mit der quadratischen Form q.
# rand
5 rand(n)=eine zufällige ganze Zahl (bzw. rand(p,n)= eine reelle Zahl oder rand(p..n)=eine reelle Funktion) mit uniformer Verteilung in 0...n-1 (bzw. in [p;n])(rand()=rand(0,1)= eine reelle Zahl in [0,1[). Alternativ rand(n,b1,b2)=n ganze Zahlen zwischen b1 und b2 oder rand(n,L)=n Elemente von L.
# hasard
5 hasard(n)=eine zufällige ganze Zahl (bzw. hasard(p,n)= eine reelle Zahl oder hasard(p..n)=eine reelle Funktion) mit uniformer Verteilung in 0...n-1 (bzw. in [p;n])(hasard()=hasard(0,1)= eine reelle Zahl in [0,1[). Alternativ hasard(n,b1,b2)=n ganze Zahlen zwischen b1 und b2 oder rand(n,L)=n Elemente von L. Wenn hasard nur ein Argument hat sind die () nicht notwendig. (Kompatibel mit Schildkröte)
# randbinomial
5 Gibt ein zufällige ganze Zahl zurück, der eine binomial-Verteilung B(n,p) zugrunde liegt d.h. die Anzahl der Erfolge für n unabhängige Tests, wobei jeder Test die Wahrscheinlichkeit p hat positiv auszufallen. 
# randmultinomial
5 Gibt den zufälligen Index oder das zufällige Listenelement zurück. Diese sind multinomial verteilt. Die Verteilung wird durch die Liste P übergeben. 
# randgeometric
# randpoisson
5 Gibt eine zufällige ganze Zahl zurück, der die Poissonverteilung P(lambda) zugrunde liegt.
# randchisquare
5 Gibt eine zufällige ganze Zahl zurück, der die chi^2-Verteilung chi^2(n) zugrunde liegt (n Anzahl der Freiheitsgrade).
# randstudent
5 Gibt eine zufällige ganze Zahl mit Student-Verteilung S(n) zurück.
# randfisher
5 Gibt die zufällige ganze Zahl mit Fisher-Snedecor-Verteilung F(n,m) zurück.
# randnorm
5 Gibt die zufällige reelle Zahl mit Normal-Verteilung N(mu,sigma) zurück.
# randexp
5 Gibt die zufällige reelle Zahl mit Exponential-Verteilung mit Parameter a>0 zurück.
# randpoly
5 Gibt das Polynom der Variable var (oder x) des Grades n zurück. Die Koeffzienten sind zufällige ganze Zahlen im Bereich -95 bis 95 mit uniformer Verteilung oder mit einem Verteilungsgesetzes. 
# ranm
5 Gibt die Liste der größe n oder eine n*m Matrix zurück, deren Einträge zufällige ganze Zahlen zwischen -95 und 95 sind oder zufällige Zahlen mit einer Verteilungsregel, die in Anführungszeichen übergeben werden kann. 
# randvector
5 Gibt die Liste der Größe n zurück, die zufällige ganze Zahlen zwischen -95 und 95  (oder aus 0...m-1) mit uniformer Verteilung enthält. Die Liste kann auch mit zufälligen Zahlen gefüllt werden, die einem Verteilungsgesetz folgen, dass in Anführungszeichen übergeben werden kann. 
# randperm
5 Gibt eine zufällige Permutation von [0,1,2,..,n-1] zurück.
# nextperm
5 Gibt die nächste Permutation in lexikographischer Reihenfolge zurück.
# prevperm
5 Gibt die vorherige Permutation in lexikographischer Reihenfolge zurück.
# radius
5 radius(C) gibt den Radius des Kreises C zurück. 
# rcl
5 Holt den Inhalt einer Variable zurück, ohne sie auszuwerten.
# re
5 Gibt den Realteil einer komplexen Zahl zurück.
# rem
5 Euklidischer Rest von 2 Polynome.
# Rem
5 Gibt den euklidischen Rest von 2 Polynomen ohne Auswertung zurück.
# remove
5 Löscht die Vorkommnisse e aus l oder die Elemente e sodass f(e)=wahr. 
# reorder
5 Ordnet die Variablen in E bezüglich der Reihenfolge des zweiten Arguments neu.
# resultant
5 Resultante von zwei Polynomen.
# sylvester
5 Sylvester-Matrix von zwei Polynomen.
# rootof
5 Polynom in Form einer Nullstelle eines irreduziblen Polynoms auf Q. Gibt P(a) mit der größten Nullstelle von Q zurück.
# rotation
5 rotation(B,a1,A)(bzw. rotation(d,a1,A)) ist die Transformierte von A mit der Rotation um das Zentrum B(bzw. Um die Axe d) mit dem Winkel a1.
# rmbreakpoint
5 Entfernt einen Stopp-Punkt(breakpoint).
# rmwatch
5 Löscht die Variable von der Tabelle der angezeigten Variablen in Schritt-für-Schritt.
# rref
5 Zeilenreduktion auf Echelon-Form (Treppenform) von AX=b (M=A|(-b)) [Reduktion auf den Spalten 0..k-1]
# keep_pivot
5 Option des rref Befehls.
# Rref
5 Gibt die Zeilenreduktion auf Echelon-Form (Treppenform) von AX=b (M=A|(-b)) ohne Auswertung zurück.
# ref
5 Gaußsche Reduktion von AX=b (M=A|(-b)).
# same
5 Gleichheitstest.
# sec
5 Sekansfunktion:sec(x)=1/cos(x).
# segment
5 segment(A,B) zeichnet das Intervall AB und segment([xM,yM],[xN,yN]) zeichnet den Vektor mit Ursprung [xM,yM] und den Koordinaten [xN,yN] (d.h. zeichnet das Intervall (M,point(M+n)).
# half_line
5 half_line(A,B) zeichnet die Halbgerade AB mit A als Ursprung.
# series
5 Serienentwicklung bei endlichen oder unendlichen Punkten.
# select
5 Wählt die Elemente e aus l, sodass f(e)=wahr ist.
# sign
5 Gibt das Vorzeichen (-1,0,+1) des Argumentes zurück.
# signature
5 Gibt das Vorzeichen einer Permutation zurück.
# sin
5 Sinus oder Option des convert bzw. convertir Befehls (id trigsin).
# 
5 Sinus Hyperbolicus
# similarity
5 similarity(B,k,a1,A)=ähnlichkeitstransformierte von A (Zentrum B oder Achse d, Koeffizient k, Winkel a1) (oder auch homothety(B,k*exp(i*a1),A)).
# size
5 Gibt die Größe einer Liste, eines Strings oder einer Folge zurück.
# sizes
5 Gibt die Größe einer Liste aus Listen zurück.
# zeros
5 Gibt Nullen (reell oder komplex hängt vom Modus ab) der Ausdrücke zurück (oder die Matrix deren Zeilen die Lösungen des Systems: Ausdruck1=0,Ausdruck2=0...).
# solve
5 Löst eine (oder eine Menge von) Polynomialen Gleichungen.
# line_segments
5 Gibt die Liste der Kanten (1 Kante =Segment) des Polyeders P.
# faces
5 Gibt die Liste der Seiten (1Seite=matrix(n,3) wobei die n Zeilen die n Ecken der Seite sind) des Polyeders P.
# vertices
5 Gibt die Liste der Ecken des Vieleckes oder Polyeders P zurück.
# vertices_abca
5 Gibt die geschlossene Loste [A,B,..,A] der Ecken eines Polygons oder Polyeders zurück.
# sommet
5 Gibt den Gipfel eines Operators zurück.
# smod
5 Gibt den euklidischen symmetrischen Rest von zwei ganzen Zahle zurück.
# sqrt
5 Quadratwurzel
# surd
5 Potenz 1/n.
# sst
5 Führt eine Anweisung in Schritt-für-Schritt aus.
# sst_in
5 Gehe in eine Funktion in Schritt-für-Schritt-Modus hinein.
# stack
5 Reserviertes Wort.
# start
5 RPN Schleife.
# step
5 Schrittgröße in einer Iteration
# sto
5 Speichert das erste Argument in der Variable, die im zweiten Argument gegeben wurde.
# <=
5 Boolescher Infix-Operator, der die Ungleichheit testet.
# >=
5 Boolescher Infix-Operator, der die Ungleichheit testet.
# >
5 Boolescher Infix-Operator, der die Ungleichheit testet.
# <
5 Boolescher Infix-Operator, der die Ungleichheit testet.
# ==
5 Boolescher Infix-Operator, der die Gleichheit testet.
# !=
5 Boolescher Infix-Operator, der die Nicht-Gleichheit testet.
# :=
5 Infix-Operator, der das zweite Argument in der Variable des ersten Arguments speichert.
# =<
5 Infix-Operator der durch Referenz das zweite Argument in einer Variable (die eine Liste enthält), die im ersten Argument gegebenen wird, speichert.
# +=
5 Infix-Operator
# *=
5 Infix-Operator
# -=
5 Infix operator : a-=b äquivalent zu a:=a-b
# /=
5 Infix-Operator: a/=b äquivalent zu a:=a/b.
# =>
5 Infix-Operator der das erste Argument in der Variable des zweiten Arguments gspeichert. Oder die Infix-Version von convert.
# |
5 Infix-Operator. Substituiert den Wert einer Variablen in einem Ausdruck.
# subst
5 Substituiert einen Wert für eine Variable in einem Ausdruck.
# sum
5 Diskrete Summe (mit 2 oder 4 Argumenten. Gibt die Summe von a zu b wenn a<=b oder das Gegenteil der Summe von b+1 bis a-1, wenn a>b+1 oder 0, wenn a=b+1). Alternativ die diskrete Stammfunktion oder die Summe der Elemente einer Liste oder Folge.
# suppress
5 Gibt l ohne das Element mit Index n zurück.
# insert
5 Gibt l zurück, wobei das Element b am Index n eingefügt wurde.
# svd
5 Für eine quadratische numerische reelle Matrix A wird U orthogonal, S Vektor der Singulärwerte, Q orthogonal zurückgegeben, sodass A=U*diag(S)*tran(Q).
# switch
5 Test(multiple choice (verschieden Auswahl)): switch(Variable){Fall 1: {bloc1;} standard: {bloc2}};
# piecewise
5 Wenn Cond1 gebe Expr1 zurück sonst.. wenn Cond2p gebe Expr2p zurück sonst gebe Expr2p+1 zurück.
# switch_axes
5 switch_axes() löscht oder fügt die Achsen des Grafik-Bildschirms hinzu.
# xyztrange
5 xyztrange öscht oder fügt die Achsen des Grafik-Bildschirms hinzu (cf Knopf Cfg). 
# Ox_2d_unit_vector
5 Ox_2d_unit_vector() zeichnet den Einheitsvektor der x-Achsen des 2-d Grafikbildschirm.
# Oy_2d_unit_vector
5 5 Ox_2d_unit_vector() zeichnet den Einheitsvektor der y-Achsen des 2-d Grafikbildschirm.
# Ox_3d_unit_vector
5 Ox_2d_unit_vector() zeichnet den Einheitsvektor der x-Achsen des 3-d Grafikbildschirm.
# Oy_3d_unit_vector
5 Ox_2d_unit_vector() zeichnet den Einheitsvektor der y-Achsen des 3-d Grafikbildschirm.
# Oz_3d_unit_vector
5 Ox_2d_unit_vector() zeichnet den Einheitsvektor der z-Achsen des 3-d Grafikbildschirm.
# frame_2d
5 frame_2d() zeichnet die Achsen des 2-d Grafikbildschirms.
# frame_3d
5 frame_3d() zeichnet die Achsen des 3-d Grafikbildschirms.
# reflection
5 reflection(D,C) (oder reflection(A,C))=Spiegelung von C mit der Symmetrieachse D (oder dem Symmetriezentrum A).
# syst2mat
5 Gibt die Matrix M=A|(-b) assoziiert mit dem System Y=AX+b.
# tabvar
5 Tabelle der Variationen und der Graph einer Funktion auf DispG.
# tablefunc
5 Tabelle der Werte einer Funktion: Man muss den Tabellenmodus benutzen.
# tableseq
5 Tabelle der Werte einer Folge (im Tabellenmodus).
# seqsolve
5 Gibt den Wert einer rekursiven Folge zurück (u_{n+1}=f(u_n) oder u_{n+k}=f(u_n,u_{n+1}...u_{n+k-1})) oder den eines Systems rekursiver Folgen.
# rsolve
5 Gibt den Wert einer rekursiven Folge oder eines Systems rekursiver Folgen an.
# tan
5 Tangens oder Option des convert bzw. convertir Befehls (id halftan).
# tangent
5 tangent(C,A) zeichnet die Tangente (Gerade oder Ebene) durch C an A.
# tchebyshev1
5 Gibt das n-te Tchebyshev-Polynom der erste Art zurück.
# tchebyshev2
5 Gibt das n-te Tchebyshev-Polynom der zweiten Art zurück. 
# test
5 Testfunktion für Entwickler. 
# then
5 Wird in einer Wenn..Dann Konstruktion verwendet: if (Bedingung) then Befehl; end_if;
# tlin
5 Trigonometrische Linearisierung.
# trace
5 Gibt die Spur einer quadratischen Matrix zurück oder zeichnet die Spur eines geometrischen Objektes, wenn sich der Parameter verändert.(siehe Trace im Menü, Knopf auf geometrischen Niveau und schreibe nur einen Befehl pro Zeile).
# tran
5 Transponiere eine Matrix (ohne Konjugation).
# translation
5 translation(B-A,C) (bzw. translation([a,b,c],C)) ist C verschoben in Richtung des Translationsvektors AB (bzw. [a,b,c]).
# triangle
5 triangle(A,B,C) zeichnet das Dreieck ABC.
# equilateral_triangle
5 equilateral_triangle(A,B) (bzw. equilateral_triangle(A,B,P)) zeichnet das direkte gleichseitige Dreieck ABC  von der Seite AB aus (bzw in der Halb-Ebene ABP).
# isosceles_triangle
5 Zeichnet das gleichseitige Dreieck ABC AB=AC und Winkel (AB,AB)=t (oder in der Ebene ABP angle(AB,AC)=angle(AB,AP) oder angle(AB,AC)=t).
# right_triangle
5 Zeichnet das rechtwinklige Dreieck ABC mit AC=k*AB (oder in der Ebene ABP AC=AP ,wobei AC=k*AB).
# trn
5 Gibt das adjungierte der Matrix A zurück =tran(conj(A)).
# truncate
5 Schneidet das Polynom P bei Ordnung n ab.
# try
5 Schutz gegen Fehler: try {instructions;} catch(variable) {error_instructions;} (in einem Programm).
# type
5 Gibt n in [1..12] zurück, dass den Typ des Arguments definiert.
# subtype
5 Gibt 1 für eine Folge, 2 für eine Menge, 10 für ein Polynom und 0 sonst zurück.
# union
5 union ist ein Infix-Operator um die Vereinigung von zwei Mengen zu erhalten.
# valuation
5 Gibt den Grad des Terms mit dem kleinsten Grad eines Polynoms zurück.
# vandermonde
5 Gibt die Vandermonde-Matrix =[V^0,V^1,..] zurück.
# VARS
5 Liste der Variablen und Ordner im aktuellen Pfad.
# vpotential
5 Gibt U zurück sodass curl(U)=V (curl ist rot).
# watch
5 Fügt eine Variable zu der Liste der angezeigten Variablen in Schritt-für-Schritt hinzu.
# while
5 While-Schleife (führe die Instruktionen aus, während cond==true also die Bedingung erfüllt ist): while (cond) {i1;i2;};
# repeat
5 repeat-Loop (Wiederholt die Instruktion bis cond==true also die Bedingung erfüllt ist): repeat i1;i2; until cond;
# {}
5 Block mit Instruktionen.
# abcuv
5 Gibt [u,v] zurück, sodass au+bv=c für drei Polynome a,b,c.
# iabcuv
5 Gibt [u,v] zurück, sodass au+bv=c für drei ganze Zahlen a,b,c.
# iegcd
5 Erweitertet größter gemeinsamer Teiler zweier ganzer Zahlen.
# acos2asin
5 Ersetze arccos(x) durch pi/2-arcsin(x) im Argument.
# acos2atan
5 Ersetzt arccos(x) durch pi/2-arctan(x/sqrt(1-x^2)) im Argument. 
# asin2acos
5 Ersetzt arcsin(x) durch pi/2-arccos(x) im Argument.
# asin2atan
5 Ersetzt arcsin(x) durch arctan(x/sqrt(1-x^2)) im Argument.
# collect
5 Ganzzahliges Faktorisieren eines Polynoms (oder eine Liste aus Polynomen).
# idivis
5 Gibt die Liste der Teiler einer ganzen Zahl zurück. 
# divis
5 Gibt die Liste der Teiler eines Polynoms zurück.
# exp2pow
5 Transformiert exp(n*ln(x)) in x^n.
# exp2trig
5 Wandelt die komplexe Exponentialfunktion in Sinus und Kosinus um.
# sincos
5 Wandelt die komplexe Exponentialfunktion in Sinus und Kosinus um (id exp2trig) oder Option des convert bzw. convertir Befehls (id sincos).
# ifactors
5 Gibt die Liste der Primfaktoren einer ganzen Zahl zurück (jedem Faktor folgt seine Multiplizität). 
# factors
5 Gibt die Liste der Primfaktoren eines Polynoms zurück (jedem Faktor folgt seine Multiplizität). 
# fourier_an
5 Gibt den n-ten Fourrier-Koeffizienten zurück an=2/T*integrate(f(x)*cos(2*pi*n*x/T),a,a+T).
# fourier_bn
5 Gibt den n-ten Fourrier-Koeffizienten zurück bn=2/T*integrate(f(x)*sin(2*pi*n*x/T),a,a+T).
# fourier_cn
5 Gibt den n-ten Fourrier-Koeffizienten cn=1/T*integrate(f(x)*exp(-2*i*pi*n*x/T),a,a+T) zurück.
# f2nd
5 Gibt die Liste der Zähler und Nenner der vereinfachte Brüche zurück.
# gbasis
5 Gröbnerbasis des Ideals aufgespannt durch die Liste von Polynome.
# greduce
5 Gibt den Rest der Division eines Polynoms durch eine Gröbnerbasis zurück.
# halftan
5 Wandelt sin(x),cos(x) und tan(x) in Funktionen von tan(x/2) um.
# horner
5 Gibt den Wert von P(a) berechnet durch das Horner-Schema zurück. horner(liste_alpha_i,liste_x_i,x) erlaubt es die Auswertung mit Hilfe der geteilten Differenzen durchzuführen, die ein Interpolationspolynom bei x berechnen. 
# ifte
5 If condition returns Expr1 else returns Expr2 (=Wenn Bedingung gebe Expr1 zurück sonst gebe Expr2 zurück).
# when
5 Wenn Bedingung (sogar symbolisch) gebe Expr1 zurück sonst gebe Expr2 zurück (? ist die Infix-Version von when.)
# ?
5 ? ist die Infix-Version von when: (Cond) ? Expr1:Expr2. Wenn Bedingung Cond=1 (sogar symbolisch) gebe Expr1 zurück sonst gebe Expr2 zurück.
# intersect
5 intersect ist der infix-Operator um die Schnittmenge zweier Mengen zu erhalten.
# lncollect
5 Fasst Logarithmen zusammen. Wendet ln(a)+n*ln(b)->ln(a*b^n) für ganze Zahlen n an.  
# makemat
5 Macht eine Matrix. 
# matrix
5 Macht eine Matrix m(j,k) mit p Zeilen und q Spalten, m(j,k)=f(j,k) oder m(j,k)=a: Der Index beginnt mit 0 oder 1 abhängig vom Modus (Xcas oder Maple) (oder Option von apply). Alternativ kann eine Matrix von einer Tabelle aus gemacht werden. 
# display
5 Zeichnet ein geometrische Objekt mit der Farbe schwarz=0, rot=1, grün=2, gelb=3, blau=4 ausgefüllt. Oder füllt die Farbe in das innere einer geschlossenen Kurve, line_width_n (0<n<8) ist für die Breite der Linie und dash_line ist für eine gepunktete Linie. 
# point_width_1
5 Option des Befehls display für einen Punkt.
# line_width_1
5 Option des Befehls display für eine Linie.
# dash_line
5 Option des Befehls display für eine Linie.
# rhombus_point
5 Option des Befehls display für einen Punkt.
# hidden_name
5 Option des Befehls display um Namen zu verbergen. 
# filled
5 Option des Befehls display um Zeichnungen auszufüllen.
# white
5 Option des Befehls display um mit Farbe anzuzeigen.
# quadrant1
5 Option des Befehls Display um Legenden zu schreiben.
# -<
5 Infix-Operator (äquivalent zum Präfix-Operator color), der die Attribute eines geometrischen Objekts definiert.
# ->
5 Inifix-Operator der eine benutzerspezifische Funktion definiert:  x->f(x).
# function
5 Instruktion die eine benutzerspezifische Funktion definiert.
# mod
5 Infix-Operator, der n mod p zurückgibt eine Nummer aus N/pN
# pa2b2
5 Gibt [a,b] zurück, sodass a^2+b^2=n (für n Primzahl und n=1 (mod4)).
# permu2cycles
5 Wandelt eine Permutation in ein Produkt disjunkter Zirkel um.
# plotseq
5 Erlaubt die ersten p Terme der Folge u(0)=a, u(n))=f(u(n-1)) anzuzeigen. 
# propfrac
5 Vereinfacht und schreibt den Bruch (oder den rationalen Bruch) A/B als Q+R/B mit R<B (oder deg(R)<deg(B)).
# rank
5 Gibt den Rang einer Matrix zurück.
# romberg
5 Gibt den ungefähren Wert von integrate(f(x),x,a,b) durch Romberg-Integration zurück. 
# gaussquad
5 Gibt den ungefähren Wert von integrate(f(x),x,a,b) durch adaptive Gauß-Quadratur mit 15 Punkten zurück.
# round
5 Rundet die reelle oder komplexe Zahl zur nächsten ganzen Zahl (bzw. zum nächsten Dezimal) oder zum nächsten Element von  â„¤[i] (bzw. mit n Dezimalen). 
# epsilon
5 Gibt den Wert von Epsilon der CAS-Konfiguration zurück.
# simp2
5 Gibt die Liste [A/gcd(A,B),B/gcd(A,B)] zurück.
# simplify
5 Vereinfacht einen Ausdruck.
# sort
5 Gibt die geordnete Liste (oder Folge) mit aufsteigender Reihenfolge oder bezüglich der Funktion des zweiten Argument, die eine schwache strikte Ordnung definiert oder sammelt alle gleichen Terme in Summen oder Produkten.
# split
5 Spaltet die beiden Variablen var1, var2 des Ausdrucks Xpr (ohne Zähler) oder gibt [0] zurück.
# sum_riemann
5 Gibt ein äquivalent in der Umgebung von var1=+infini der Summe von Xpr(var1,var2) zurück, wobei var2 von 1 zu var2 läuft, wenn die Summe Riemannsch ist.
# sturmseq
5 Sturm-Kette korrespondierend zu einem Polynom oder einem rationalen Bruch.
# sturm
5 Sturm-Kette korrespondierend zu einem Polynom oder einer Zahl von Vorzeichenwechsel dieses Polynoms in ]a;b].
# sturmab
5 Zahl der Vorzeichenwechsel des Polynoms in ]a;b] oder der komplexen Nullstellen in a..b, wenn a oder b nicht reell sind.
# tail
5 Gibt die Liste (oder Folge oder String) ohne erstes Element zurück. 
# mid
5 Gibt die Liste zurück, die sich ergibt, wenn man aus l n Elemente nimmt (standardmäßig n=size(l)-d) und am Index d beginnt).
# tan2sincos
5 Ersetzt tan(x) durch sin(x)/cos(x) im Argument.
# sin2costan
5 Ersetzt sin(x) durch cos(x)*tan(x) im Argument. 
# cos2sintan
5 Ersetzt cos(x) durch sin(x)/tan(x) im Argument. 
# tan2sincos2
5 Ersetzt tan(x) durch sin(2*x)/(1+cos(2*x)) im Argument.
# tan2cossin2
5 Ersetzt tan(x) durch (1-cos(2*x))/sin(2*x) im Argument.
# tanh
5 Tangens hyperbolikus.
# tcollect
5 Fasst trigonometrische Audrücke zusammen. 
# texpand
5 Entwickelt transzendente Funktionen. 
# trig2exp
5 Ersetzt die trigonometrischen Funktionen im Argument durch komplexe Exponentialfunktionen ohne Linearisierung.
# trigcos
5 Vereinfacht das Argument mit den Formeln sin(x)^2+cos(x)^2=1 und tan(x)=sin(x)/cos(x) wobei Kosinus bevorzugt wird. 
# trigsin
5 Vereinfacht das Argument mit den Formeln sin(x)^2+cos(x)^2=1 und tan(x)=sin(x)/cos(x) wobei Sinus bevorzugt wird. 
# trigtan
5 Vereinfacht das Argument mit den Formeln sin(x)^2+cos(x)^2=1 und tan(x)=sin(x)/cos(x) wobei Tangens bevorzugt wird. 
# tsimplify
5 Verringert die Anzahl der nicht rationalen Variablen.
# Zeta
5 Gibt wenn a>1 sum(1/n^a,n,1,+infinity) zurück.
# open
5 Öffnet eine Datei mit dem Namen s, gibt den Dateihandle zurück.
# fopen
5 Öffnet die Datei mit Namen s und gibt eine Variable des Typs Datei zurück.
# fclose
5 Schließt die Datei f. 
# fprint
5 Schreibt Daten in Datei f. 
# readwav
5 Liest eine WAV-Sounddatei.
# writewav
5 Schreibt in eine WAV-Sounddatei.
# playsnd
5 Spielt Sound-Daten ab.
# soundsec
5 Erstellt eine Vektor, der n Sekunden Zeit /N entspricht (standardmäßig N=44100).
# readrgb
5 Liest eine Bilddatei, dabei wird seine originale Größe verwendet. Im Argument kann die Größe auch spezifiziert werden.
# writergb
5 Schreibt eine PNG Bilddatei mit dem Namen s entweder von einer Liste [[anzahl-kanaäele,breite,höhe],rot,grün,alpha,blau], wobei rot, grün, alpha, blau Matrizen mit Farbpixeln sind, oder von einer Matrix von grauen Pixeln oder drei Matrizen die die Farben RGB enthalten.
# Li
5 Logarithmisches Integral Li(x)=Ei(ln(x)) Stammfunktion von 1/ln(x) 
# Ei
5 Exponentialintegral int(exp(t)/t,t=-inf..x)
# Ci
5 Cosinusintegral int(cos(t)/t,t=-inf..x)
# Si
5 Sinusintegral int(sin(t)/t,t=0..x)
# invztrans
5 Inverse z-Transformation einer rationalen Funktion.
# ztrans
5 Z-Transformation einer Folge
# eval_level
5 Auswertungs-Niveau im interaktiven Modus (n sagt wie oft man eine Variable durch seine Wert ersetzt umgekehrt ist es standardmäßig der Wert von eval aus der Konfiguration von CAS)
# eliminate
5 Eliminiert die Variable vars in der Liste der algebraischen Gleichungen.
# algsubs
5 Ersetzt im Ausdruck Xpr, den algebraischen Ausdruck Xpr1 durch den algebraischen Ausdruck Xpr2. 
# plotproba
5 Graph der Übergangsmatrix mit 7 mal 7 Einträgen (optional mit Liste der Vertex-Positionen).
# autosimplify
5 Das Argument ist ein Befehl den Xcas verwendet um Antworten umzuschreiben (der Anfangswert ist regroup oder 1 und um nicht zu vereinfachen ist es nop oder 0).
# regroup
5 Fasst Terme in einem Ausdruck zusammen.
# is_inside
5 Prüft ob ein Punkt in einem Polygon oder Kreis ist.
# in_ideal
5 Prüft ob ein Polynom oder eine Liste aus Polynomen zu einem Ideal gehört, dass durch seine Gröbnerbasis gegebenen wurde (zweites Argument), bezüglich einer Liste aus Variablen. 
# normalt
5 Z-Test/Normalverteilung: arg1=[Treffe,Versuch] oder [Mittel, Stichprobengröße] oder Daten. Arg2=Proportion oder Mittel der Vorkommnisse oder Daten, arg 3 optional, wenn Daten=sigma sind, arg4 alternativ '!=' oder '>' oder '<', arg5 optional Konfidenzniveau (statistische Sicherheit).
# studentt
5 T-Test/Student-Verteilung: arg1=[Treffe,Versuch] oder [Mittel, Stichprobengröße] oder Daten. Arg2=Proportion oder Mittel der Vorkommnisse oder Daten, arg 3 optional wenn Daten=sigma, arg4 alternativ '!=' oder '>' oder '<', arg5 optional Konfidenzniveau (statistische Sicherheit).
# osculating_circle
5 Krümmungskreis am Punkt M der Kurve C.
# curvature
5 Krümmung der Kurve C am Punkt M.
# evolute
5 Evolute einer Kurve C.
# wilcoxont
5 Wilcoxon- oder Mann-Whitney-Test einer Stichprobe und einem Median oder zweier Sticproben.
# wilcoxonp
5 Verteilung des Wilcoxon- oder Mann-Whitney-Tests für eine oder zwei Stichproben.
# wilcoxons
5 Statistik von Wilcoxon oder von Mann-Whitney für eine Stichprobe und einen Median oder für zwei Stichproben.
# dayofweek
5 dayofweek(d,m,y) gibt den Tag des gegeben Datums (Tag,Monat,Jahr) zurück: 0 für Sonntag, 1 für Montag..6 für Samstag.
